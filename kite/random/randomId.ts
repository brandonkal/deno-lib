/**
 * @author Brandon Kalinowski
 * @copyright 2020 Brandon Kalinowski
 * @license Not Provided. Contact for details.
 */
// *** WARNING: this file was generated by the Kite Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as kite from 'https://deno.land/x/lib/kite.ts'

/**
 * The resource `random.RandomId` generates random numbers that are intended to be
 * used as unique identifiers for other resources.
 *
 * This resource *does* use a cryptographic random number generator in order
 * to minimize the chance of collisions, making the results of this resource
 * when a 16-byte identifier is requested of equivalent uniqueness to a
 * type-4 UUID.
 *
 * This resource can be used in conjunction with resources that have
 * the `createBeforeDestroy` lifecycle flag set to avoid conflicts with
 * unique names during the brief period where both the old and new resources
 * exist concurrently.
 *
 * ## Example Usage
 *
 * The following example shows how to generate a unique name for an AWS EC2
 * instance that changes each time a new AMI id is selected.
 *
 * ```typescript
 * // NOTE: Generated example is valid Pulumi Code. Generally Kite Code is similar but may differ.
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as random from "@pulumi/random";
 *
 * const serverRandomId = new random.RandomId("server", {
 *     byteLength: 8,
 *     keepers: {
 *         // Generate a new id each time we switch to a new AMI id
 *         ami_id: var_ami_id,
 *     },
 * });
 * const serverInstance = new aws.ec2.Instance("server", {
 *     ami: serverRandomId.keepers.apply(keepers => keepers.amiId),
 *     tags: {
 *         Name: pulumi.interpolate`web-server ${serverRandomId.hex}`,
 *     },
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-random/blob/master/website/docs/r/id.html.md.
 */
export class RandomId extends kite.Resource {
	public readonly /*out*/ b64!: string
	/**
	 * The generated id presented in base64 without additional transformations.
	 */
	public readonly /*out*/ b64Std!: string
	/**
	 * The generated id presented in base64, using the URL-friendly character set: case-sensitive letters, digits and the characters `_` and `-`.
	 */
	public readonly /*out*/ b64Url!: string
	/**
	 * The number of random bytes to produce. The
	 * minimum value is 1, which produces eight bits of randomness.
	 */
	public readonly byteLength!: number
	/**
	 * The generated id presented in non-padded decimal digits.
	 */
	public readonly /*out*/ dec!: string
	/**
	 * The generated id presented in padded hexadecimal digits. This result will always be twice as long as the requested byte length.
	 */
	public readonly /*out*/ hex!: string
	/**
	 * Arbitrary map of values that, when changed, will
	 * trigger a new id to be generated. See
	 * the main provider documentation for more information.
	 */
	public readonly keepers!: { [key: string]: any } | undefined
	/**
	 * Arbitrary string to prefix the output value with. This
	 * string is supplied as-is, meaning it is not guaranteed to be URL-safe or
	 * base64 encoded.
	 */
	public readonly prefix!: string | undefined

	/**
	 * Create a RandomId resource with the given unique name, arguments, and options.
	 *
	 * @param name The _unique_ name of the resource.
	 * @param args The arguments to use to populate this resource's properties.
	 */
	constructor(name: string, args: RandomIdArgs) {
		let inputs: any = {}
		if (!args || args.byteLength === undefined) {
			throw new Error("Missing required property 'byteLength'")
		}
		inputs.byteLength = args ? args.byteLength : undefined
		inputs.keepers = args ? args.keepers : undefined
		inputs.prefix = args ? args.prefix : undefined
		super(name, inputs)
		this.setType(RandomId.__kiteType)
		this.b64 = `{{ tf ${this.id()}.b64 }}` as any /*out*/
		this.b64Std = `{{ tf ${this.id()}.b64Std }}` as any /*out*/
		this.b64Url = `{{ tf ${this.id()}.b64Url }}` as any /*out*/
		this.dec = `{{ tf ${this.id()}.dec }}` as any /*out*/
		this.hex = `{{ tf ${this.id()}.hex }}` as any /*out*/
	}
	/**
	 * Used to map camelCased properties to Terraform snake_case
	 * @internal
	 */
	static convertMap: Record<string, string> = {
		byteLength: 'byte_length',
		keepers: 'keepers',
		prefix: 'prefix',
		b64: 'undefined',
		b64Std: 'undefined',
		b64Url: 'undefined',
		dec: 'undefined',
		hex: 'undefined',
	}

	/**
	 * Transforms the Resource instance into the Terraform JSON representation.
	 * @internal
	 */
	convert() {
		const props: any = {}
		Object.entries(this).forEach(([key, value]) => {
			const newKey = RandomId.convertMap[key]
			if (!newKey) {
				throw new Error(
					`Could not print key: ${key}. Not found in ${
						(this as any).__type
					} spec.`
				)
			}
			if (newKey !== 'undefined' /* out */) {
				props[newKey] = value
			}
		})
		return {
			terraform: {
				required_providers: {
					random: '~> 2.2.2',
				},
			},
			resource: {
				random_id: { [this.__name]: props },
			},
		}
	}

	/** @internal */
	public static readonly __kiteType = 'tf:random:index/randomId:RandomId'
	/** @internal */
	public static readonly __tfType = 'random_id'

	/** @internal */
	public id() {
		return RandomId.__tfType + '.' + this.__name
	}
}

/**
 * The set of arguments for constructing a RandomId resource.
 */
export interface RandomIdArgs {
	/**
	 * The number of random bytes to produce. The
	 * minimum value is 1, which produces eight bits of randomness.
	 */
	readonly byteLength: number
	/**
	 * Arbitrary map of values that, when changed, will
	 * trigger a new id to be generated. See
	 * the main provider documentation for more information.
	 */
	readonly keepers?: { [key: string]: any }
	/**
	 * Arbitrary string to prefix the output value with. This
	 * string is supplied as-is, meaning it is not guaranteed to be URL-safe or
	 * base64 encoded.
	 */
	readonly prefix?: string
}
