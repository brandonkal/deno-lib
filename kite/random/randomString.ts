/**
 * @author Brandon Kalinowski
 * @copyright 2020 Brandon Kalinowski
 * @license Not Provided. Contact for details.
 */
// *** WARNING: this file was generated by the Kite Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as kite from 'https://deno.land/x/lib/kite.ts'

/**
 * The resource `random.RandomString` generates a random permutation of alphanumeric
 * characters and optionally special characters.
 *
 * This resource *does* use a cryptographic random number generator.
 *
 * Historically this resource's intended usage has been ambiguous as the original example
 * used it in a password. For backwards compatibility it will
 * continue to exist. For unique ids please use random_id, for sensitive
 * random values please use random_password.
 *
 * ## Example Usage
 *
 * ```typescript
 * // NOTE: Generated example is valid Pulumi Code. Generally Kite Code is similar but may differ.
 * import * as pulumi from "@pulumi/pulumi";
 * import * as random from "@pulumi/random";
 *
 * const randomRandomString = new random.RandomString("random", {
 *     length: 16,
 *     overrideSpecial: "/@Â£$",
 *     special: true,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-random/blob/master/website/docs/r/string.html.md.
 */
export class RandomString extends kite.Resource {
	/**
	 * Arbitrary map of values that, when changed, will
	 * trigger a new id to be generated. See
	 * the main provider documentation for more information.
	 */
	public readonly keepers!: { [key: string]: any } | undefined
	/**
	 * The length of the string desired
	 */
	public readonly length!: number
	/**
	 * (default true) Include lowercase alphabet characters
	 * in random string.
	 */
	public readonly lower!: boolean | undefined
	/**
	 * (default 0) Minimum number of lowercase alphabet
	 * characters in random string.
	 */
	public readonly minLower!: number | undefined
	/**
	 * (default 0) Minimum number of numeric characters
	 * in random string.
	 */
	public readonly minNumeric!: number | undefined
	/**
	 * (default 0) Minimum number of special characters
	 * in random string.
	 */
	public readonly minSpecial!: number | undefined
	/**
	 * (default 0) Minimum number of uppercase alphabet
	 * characters in random string.
	 */
	public readonly minUpper!: number | undefined
	/**
	 * (default true) Include numeric characters in random
	 * string.
	 */
	public readonly number!: boolean | undefined
	/**
	 * Supply your own list of special characters to
	 * use for string generation.  This overrides the default character list in the special
	 * argument.  The special argument must still be set to true for any overwritten
	 * characters to be used in generation.
	 */
	public readonly overrideSpecial!: string | undefined
	/**
	 * Random string generated.
	 */
	public readonly /*out*/ result!: string
	/**
	 * (default true) Include special characters in random
	 * string. These are `!@#$%&*()-_=+[]{}<>:?`
	 */
	public readonly special!: boolean | undefined
	/**
	 * (default true) Include uppercase alphabet characters
	 * in random string.
	 */
	public readonly upper!: boolean | undefined

	/**
	 * Create a RandomString resource with the given unique name, arguments, and options.
	 *
	 * @param name The _unique_ name of the resource.
	 * @param args The arguments to use to populate this resource's properties.
	 */
	constructor(name: string, args: RandomStringArgs) {
		let inputs: any = {}
		if (!args || args.length === undefined) {
			throw new Error("Missing required property 'length'")
		}
		inputs.keepers = args ? args.keepers : undefined
		inputs.length = args ? args.length : undefined
		inputs.lower = args ? args.lower : undefined
		inputs.minLower = args ? args.minLower : undefined
		inputs.minNumeric = args ? args.minNumeric : undefined
		inputs.minSpecial = args ? args.minSpecial : undefined
		inputs.minUpper = args ? args.minUpper : undefined
		inputs.number = args ? args.number : undefined
		inputs.overrideSpecial = args ? args.overrideSpecial : undefined
		inputs.special = args ? args.special : undefined
		inputs.upper = args ? args.upper : undefined
		super(name, inputs)
		this.setType(RandomString.__kiteType)
		this.result = `(( tf ${this.id()}.result ))` as any /*out*/
	}
	/**
	 * Used to map camelCased properties to Terraform snake_case
	 * @internal
	 */
	static convertMap: Record<string, string> = {
		keepers: 'keepers',
		length: 'length',
		lower: 'lower',
		minLower: 'min_lower',
		minNumeric: 'min_numeric',
		minSpecial: 'min_special',
		minUpper: 'min_upper',
		number: 'number',
		overrideSpecial: 'override_special',
		special: 'special',
		upper: 'upper',
		result: 'undefined',
	}

	/**
	 * Transforms the Resource instance into the Terraform JSON representation.
	 * @internal
	 */
	convert() {
		const props: any = {}
		Object.entries(this).forEach(([key, value]) => {
			const newKey = RandomString.convertMap[key]
			if (!newKey) {
				throw new Error(
					`Could not print key: ${key}. Not found in ${
						(this as any).__type
					} spec.`
				)
			}
			if (newKey !== 'undefined' /* out */) {
				props[newKey] = value
			}
		})
		return {
			terraform: {
				required_providers: {
					random: '~> 2.2.2',
				},
			},
			resource: {
				random_string: { [this.__name]: props },
			},
		}
	}

	/** @internal */
	public static readonly __kiteType =
		'tf:random:index/randomString:RandomString'
	/** @internal */
	public static readonly __tfType = 'random_string'

	/** @internal */
	public id() {
		return RandomString.__tfType + '.' + this.__name
	}
}

/**
 * The set of arguments for constructing a RandomString resource.
 */
export interface RandomStringArgs {
	/**
	 * Arbitrary map of values that, when changed, will
	 * trigger a new id to be generated. See
	 * the main provider documentation for more information.
	 */
	readonly keepers?: { [key: string]: any }
	/**
	 * The length of the string desired
	 */
	readonly length: number
	/**
	 * (default true) Include lowercase alphabet characters
	 * in random string.
	 */
	readonly lower?: boolean
	/**
	 * (default 0) Minimum number of lowercase alphabet
	 * characters in random string.
	 */
	readonly minLower?: number
	/**
	 * (default 0) Minimum number of numeric characters
	 * in random string.
	 */
	readonly minNumeric?: number
	/**
	 * (default 0) Minimum number of special characters
	 * in random string.
	 */
	readonly minSpecial?: number
	/**
	 * (default 0) Minimum number of uppercase alphabet
	 * characters in random string.
	 */
	readonly minUpper?: number
	/**
	 * (default true) Include numeric characters in random
	 * string.
	 */
	readonly number?: boolean
	/**
	 * Supply your own list of special characters to
	 * use for string generation.  This overrides the default character list in the special
	 * argument.  The special argument must still be set to true for any overwritten
	 * characters to be used in generation.
	 */
	readonly overrideSpecial?: string
	/**
	 * (default true) Include special characters in random
	 * string. These are `!@#$%&*()-_=+[]{}<>:?`
	 */
	readonly special?: boolean
	/**
	 * (default true) Include uppercase alphabet characters
	 * in random string.
	 */
	readonly upper?: boolean
}
