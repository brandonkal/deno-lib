/**
 * @author Brandon Kalinowski
 * @copyright 2020 Brandon Kalinowski
 * @license Not Provided. Contact for details.
 */
// *** WARNING: this file was generated by the Kite Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as kite from 'https://deno.land/x/lib/kite.ts'

/**
 * The resource `random.RandomInteger` generates random values from a given range, described by the `min` and `max` attributes of a given resource.
 *
 * This resource can be used in conjunction with resources that have
 * the `createBeforeDestroy` lifecycle flag set, to avoid conflicts with
 * unique names during the brief period where both the old and new resources
 * exist concurrently.
 *
 * ## Example Usage
 *
 * The following example shows how to generate a random priority between 1 and 50000 for
 * a `awsAlbListenerRule` resource:
 *
 * ```typescript
 * // NOTE: Generated example is valid Pulumi Code. Generally Kite Code is similar but may differ.
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as random from "@pulumi/random";
 *
 * const priority = new random.RandomInteger("priority", {
 *     keepers: {
 *         // Generate a new integer each time we switch to a new listener ARN
 *         listener_arn: var_listener_arn,
 *     },
 *     max: 50000,
 *     min: 1,
 * });
 * const main = new aws.alb.ListenerRule("main", {
 *     actions: [{
 *         targetGroupArn: var_target_group_arn,
 *         type: "forward",
 *     }],
 *     listenerArn: var_listener_arn,
 *     priority: priority.result,
 * });
 * ```
 *
 * The result of the above will set a random priority.
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-random/blob/master/website/docs/r/integer.html.md.
 */
export class RandomInteger extends kite.Resource {
	/**
	 * Arbitrary map of values that, when changed, will
	 * trigger a new id to be generated. See
	 * the main provider documentation for more information.
	 */
	public readonly keepers!: { [key: string]: any } | undefined
	/**
	 * The maximum inclusive value of the range.
	 */
	public readonly max!: number
	/**
	 * The minimum inclusive value of the range.
	 */
	public readonly min!: number
	/**
	 * (int) The random Integer result.
	 */
	public readonly /*out*/ result!: number
	/**
	 * A custom seed to always produce the same value.
	 */
	public readonly seed!: string | undefined

	/**
	 * Create a RandomInteger resource with the given unique name, arguments, and options.
	 *
	 * @param name The _unique_ name of the resource.
	 * @param args The arguments to use to populate this resource's properties.
	 */
	constructor(name: string, args: RandomIntegerArgs) {
		let inputs: any = {}
		if (!args || args.max === undefined) {
			throw new Error("Missing required property 'max'")
		}
		if (!args || args.min === undefined) {
			throw new Error("Missing required property 'min'")
		}
		inputs.keepers = args ? args.keepers : undefined
		inputs.max = args ? args.max : undefined
		inputs.min = args ? args.min : undefined
		inputs.seed = args ? args.seed : undefined
		super(name, inputs)
		this.setType(RandomInteger.__kiteType)
		this.result = `(( tf ${this.id()}.result | number ))` as any /*out*/
	}
	/**
	 * Used to map camelCased properties to Terraform snake_case
	 * @internal
	 */
	static convertMap: Record<string, string> = {
		keepers: 'keepers',
		max: 'max',
		min: 'min',
		seed: 'seed',
		result: 'undefined',
	}

	/**
	 * Transforms the Resource instance into the Terraform JSON representation.
	 * @internal
	 */
	convert() {
		const props: any = {}
		Object.entries(this).forEach(([key, value]) => {
			const newKey = RandomInteger.convertMap[key]
			if (!newKey) {
				throw new Error(
					`Could not print key: ${key}. Not found in ${
						(this as any).__type
					} spec.`
				)
			}
			if (newKey !== 'undefined' /* out */) {
				props[newKey] = value
			}
		})
		return {
			terraform: {
				required_providers: {
					random: '~> 2.2.2',
				},
			},
			resource: {
				random_integer: { [this.__name]: props },
			},
		}
	}

	/** @internal */
	public static readonly __kiteType =
		'tf:random:index/randomInteger:RandomInteger'
	/** @internal */
	public static readonly __tfType = 'random_integer'

	/** @internal */
	public id() {
		return RandomInteger.__tfType + '.' + this.__name
	}
}

/**
 * The set of arguments for constructing a RandomInteger resource.
 */
export interface RandomIntegerArgs {
	/**
	 * Arbitrary map of values that, when changed, will
	 * trigger a new id to be generated. See
	 * the main provider documentation for more information.
	 */
	readonly keepers?: { [key: string]: any }
	/**
	 * The maximum inclusive value of the range.
	 */
	readonly max: number
	/**
	 * The minimum inclusive value of the range.
	 */
	readonly min: number
	/**
	 * A custom seed to always produce the same value.
	 */
	readonly seed?: string
}
