/**
 * @author Brandon Kalinowski
 * @copyright 2020 Brandon Kalinowski
 * @license Not Provided. Contact for details.
 */
// *** WARNING: this file was generated by the Kite Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as kite from 'https://deno.land/x/lib/kite.ts'

/**
 * The resource `random.RandomShuffle` generates a random permutation of a list
 * of strings given as an argument.
 *
 * ## Example Usage
 *
 * ```typescript
 * // NOTE: Generated example is valid Pulumi Code. Generally Kite Code is similar but may differ.
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as random from "@pulumi/random";
 *
 * const az = new random.RandomShuffle("az", {
 *     inputs: [
 *         "us-west-1a",
 *         "us-west-1c",
 *         "us-west-1d",
 *         "us-west-1e",
 *     ],
 *     resultCount: 2,
 * });
 * const example = new aws.elb.LoadBalancer("example", {
 *     // Place the ELB in any two of the given availability zones, selected
 *     // at random.
 *     availabilityZones: az.results,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-random/blob/master/website/docs/r/shuffle.html.md.
 */
export class RandomShuffle extends kite.Resource {
	/**
	 * The list of strings to shuffle.
	 */
	public readonly inputs!: string[]
	/**
	 * Arbitrary map of values that, when changed, will
	 * trigger a new id to be generated. See
	 * the main provider documentation for more information.
	 */
	public readonly keepers!: { [key: string]: any } | undefined
	/**
	 * Random permutation of the list of strings given in `input`.
	 */
	public readonly /*out*/ results!: string[]
	/**
	 * The number of results to return. Defaults to
	 * the number of items in the `input` list. If fewer items are requested,
	 * some elements will be excluded from the result. If more items are requested,
	 * items will be repeated in the result but not more frequently than the number
	 * of items in the input list.
	 */
	public readonly resultCount!: number | undefined
	public readonly seed!: string | undefined

	/**
	 * Create a RandomShuffle resource with the given unique name, arguments, and options.
	 *
	 * @param name The _unique_ name of the resource.
	 * @param args The arguments to use to populate this resource's properties.
	 */
	constructor(name: string, args: RandomShuffleArgs) {
		let inputs: any = {}
		if (!args || args.inputs === undefined) {
			throw new Error("Missing required property 'inputs'")
		}
		inputs.inputs = args ? args.inputs : undefined
		inputs.keepers = args ? args.keepers : undefined
		inputs.resultCount = args ? args.resultCount : undefined
		inputs.seed = args ? args.seed : undefined
		super(name, inputs)
		this.setType(RandomShuffle.__kiteType)
		this.results = `(( tf ${this.id()}.result ))` as any /*out*/
	}
	/**
	 * Used to map camelCased properties to Terraform snake_case
	 * @internal
	 */
	static convertMap: Record<string, string> = {
		inputs: 'input',
		keepers: 'keepers',
		resultCount: 'result_count',
		seed: 'seed',
		results: 'undefined',
	}

	/**
	 * Transforms the Resource instance into the Terraform JSON representation.
	 * @internal
	 */
	convert() {
		const props: any = {}
		Object.entries(this).forEach(([key, value]) => {
			const newKey = RandomShuffle.convertMap[key]
			if (!newKey) {
				throw new Error(
					`Could not print key: ${key}. Not found in ${
						(this as any).__type
					} spec.`
				)
			}
			if (newKey !== 'undefined' /* out */) {
				props[newKey] = value
			}
		})
		return {
			terraform: {
				required_providers: {
					random: '~> 2.2.2',
				},
			},
			resource: {
				random_shuffle: { [this.__name]: props },
			},
		}
	}

	/** @internal */
	public static readonly __kiteType =
		'tf:random:index/randomShuffle:RandomShuffle'
	/** @internal */
	public static readonly __tfType = 'random_shuffle'

	/** @internal */
	public id() {
		return RandomShuffle.__tfType + '.' + this.__name
	}
}

/**
 * The set of arguments for constructing a RandomShuffle resource.
 */
export interface RandomShuffleArgs {
	/**
	 * The list of strings to shuffle.
	 */
	readonly inputs: string[]
	/**
	 * Arbitrary map of values that, when changed, will
	 * trigger a new id to be generated. See
	 * the main provider documentation for more information.
	 */
	readonly keepers?: { [key: string]: any }
	/**
	 * The number of results to return. Defaults to
	 * the number of items in the `input` list. If fewer items are requested,
	 * some elements will be excluded from the result. If more items are requested,
	 * items will be repeated in the result but not more frequently than the number
	 * of items in the input list.
	 */
	readonly resultCount?: number
	readonly seed?: string
}
