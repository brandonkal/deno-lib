/**
 * @author Brandon Kalinowski
 * @copyright 2020 Brandon Kalinowski
 * @license Not Provided. Contact for details.
 */
// *** WARNING: this file was generated by the Kite™️ Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as kite from 'https://deno.land/x/lib/kite.ts'

/**
 * The resource `random.RandomPet` generates random pet names that are intended to be
 * used as unique identifiers for other resources.
 *
 * This resource can be used in conjunction with resources that have
 * the `createBeforeDestroy` lifecycle flag set, to avoid conflicts with
 * unique names during the brief period where both the old and new resources
 * exist concurrently.
 *
 * ## Example Usage
 *
 * The following example shows how to generate a unique pet name for an AWS EC2
 * instance that changes each time a new AMI id is selected.
 *
 * ```typescript
 * // NOTE: Generated example is valid Pulumi Code. Generally Kite™️ Code is similar but may differ.
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as random from "@pulumi/random";
 *
 * const serverRandomPet = new random.RandomPet("server", {
 *     keepers: {
 *         // Generate a new pet name each time we switch to a new AMI id
 *         ami_id: var_ami_id,
 *     },
 * });
 * const serverInstance = new aws.ec2.Instance("server", {
 *     ami: serverRandomPet.keepers.apply(keepers => keepers.amiId),
 *     tags: {
 *         Name: pulumi.interpolate`web-server-${serverRandomPet.id}`,
 *     },
 * });
 * ```
 *
 * The result of the above will set the Name of the AWS Instance to
 * `web-server-simple-snake`.
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-random/blob/master/website/docs/r/pet.html.md.
 */
export class RandomPet extends kite.Resource {
	/**
	 * Arbitrary map of values that, when changed, will
	 * trigger a new id to be generated. See
	 * the main provider documentation for more information.
	 */
	public readonly keepers!: { [key: string]: any } | undefined
	/**
	 * The length (in words) of the pet name.
	 */
	public readonly length!: number | undefined
	/**
	 * A string to prefix the name with.
	 */
	public readonly prefix!: string | undefined
	/**
	 * The character to separate words in the pet name.
	 */
	public readonly separator!: string | undefined

	/**
	 * Create a RandomPet resource with the given unique name, arguments, and options.
	 *
	 * @param name The _unique_ name of the resource.
	 * @param args The arguments to use to populate this resource's properties.
	 */
	constructor(name: string, args?: RandomPetArgs) {
		let inputs: any = {}
		inputs.keepers = args ? args.keepers : undefined
		inputs.length = args ? args.length : undefined
		inputs.prefix = args ? args.prefix : undefined
		inputs.separator = args ? args.separator : undefined
		super(name, inputs)
		this.setType(RandomPet.__kiteType)
	}
	/**
	 * Used to map camelCased properties to Terraform snake_case
	 * @internal
	 */
	static convertMap: Record<string, string> = {
		keepers: 'keepers',
		length: 'length',
		prefix: 'prefix',
		separator: 'separator',
	}

	/**
	 * Transforms the Resource instance into the Terraform JSON representation.
	 * @internal
	 */
	convert() {
		const props: any = {}
		Object.entries(this).forEach(([key, value]) => {
			const newKey = RandomPet.convertMap[key]
			if (!newKey) {
				throw new Error(
					`Could not print key: ${key}. Not found in ${
						(this as any).__type
					} spec.`
				)
			}
			if (newKey !== 'undefined' /* out */) {
				props[newKey] = value
			}
		})
		return {
			terraform: {
				required_providers: {
					random: '~> 2.2.1',
				},
			},
			resource: {
				random_pet: { [this.__name]: props },
			},
		}
	}

	/** @internal */
	public static readonly __kiteType = 'tf:random:index/randomPet:RandomPet'
	/** @internal */
	public static readonly __tfType = 'random_pet'

	/** @internal */
	public id() {
		return RandomPet.__tfType + '.' + this.__name
	}
}

/**
 * The set of arguments for constructing a RandomPet resource.
 */
export interface RandomPetArgs {
	/**
	 * Arbitrary map of values that, when changed, will
	 * trigger a new id to be generated. See
	 * the main provider documentation for more information.
	 */
	readonly keepers?: { [key: string]: any }
	/**
	 * The length (in words) of the pet name.
	 */
	readonly length?: number
	/**
	 * A string to prefix the name with.
	 */
	readonly prefix?: string
	/**
	 * The character to separate words in the pet name.
	 */
	readonly separator?: string
}
