/**
 * @author Brandon Kalinowski
 * @copyright 2020 Brandon Kalinowski
 * @license Not Provided. Contact for details.
 */
// *** WARNING: this file was generated by the Kite™️ Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as kite from 'https://x.kite.run/lib/kite.ts'

/**
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-tls/blob/master/website/docs/r/private_key.html.md.
 */
export class PrivateKey extends kite.Resource {
	/**
	 * The name of the algorithm to use for
	 * the key. Currently-supported values are "RSA" and "ECDSA".
	 */
	public readonly algorithm!: string
	/**
	 * When `algorithm` is "ECDSA", the name of the elliptic
	 * curve to use. May be any one of "P224", "P256", "P384" or "P521", with "P224" as the
	 * default.
	 */
	public readonly ecdsaCurve!: string | undefined
	/**
	 * The private key data in PEM format.
	 */
	public readonly /*out*/ privateKeyPem!: string
	/**
	 * The md5 hash of the public key data in
	 * OpenSSH MD5 hash format, e.g. `aa:bb:cc:...`. Only available if the
	 * selected private key format is compatible, as per the rules for
	 * `publicKeyOpenssh`.
	 */
	public readonly /*out*/ publicKeyFingerprintMd5!: string
	/**
	 * The public key data in OpenSSH `authorizedKeys`
	 * format, if the selected private key format is compatible. All RSA keys
	 * are supported, and ECDSA keys with curves "P256", "P384" and "P521"
	 * are supported. This attribute is empty if an incompatible ECDSA curve
	 * is selected.
	 */
	public readonly /*out*/ publicKeyOpenssh!: string
	/**
	 * The public key data in PEM format.
	 */
	public readonly /*out*/ publicKeyPem!: string
	/**
	 * When `algorithm` is "RSA", the size of the generated
	 * RSA key in bits. Defaults to 2048.
	 */
	public readonly rsaBits!: number | undefined

	/**
	 * Create a PrivateKey resource with the given unique name, arguments, and options.
	 *
	 * @param name The _unique_ name of the resource.
	 * @param args The arguments to use to populate this resource's properties.
	 */
	constructor(name: string, args: PrivateKeyArgs) {
		let inputs: any = {}
		if (!args || args.algorithm === undefined) {
			throw new Error("Missing required property 'algorithm'")
		}
		inputs.algorithm = args ? args.algorithm : undefined
		inputs.ecdsaCurve = args ? args.ecdsaCurve : undefined
		inputs.rsaBits = args ? args.rsaBits : undefined
		super(name, inputs)
		this.setType(PrivateKey.__kiteType)
		this.privateKeyPem = `(( tf ${this.id()}.private_key_pem ))` as any /*out*/
		this.publicKeyFingerprintMd5 = `(( tf ${this.id()}.public_key_fingerprint_md5 ))` as any /*out*/
		this.publicKeyOpenssh = `(( tf ${this.id()}.public_key_openssh ))` as any /*out*/
		this.publicKeyPem = `(( tf ${this.id()}.public_key_pem ))` as any /*out*/
	}
	/**
	 * Used to map camelCased properties to Terraform snake_case
	 * @internal
	 */
	static convertMap: Record<string, string> = {
		algorithm: 'algorithm',
		ecdsaCurve: 'ecdsa_curve',
		rsaBits: 'rsa_bits',
		privateKeyPem: 'undefined',
		publicKeyFingerprintMd5: 'undefined',
		publicKeyOpenssh: 'undefined',
		publicKeyPem: 'undefined',
	}

	/**
	 * Transforms the Resource instance into the Terraform JSON representation.
	 * @internal
	 */
	convert() {
		const props: any = {}
		Object.entries(this).forEach(([key, value]) => {
			const newKey = PrivateKey.convertMap[key]
			if (!newKey) {
				throw new Error(
					`Could not print key: ${key}. Not found in ${
						(this as any).__type
					} spec.`
				)
			}
			if (newKey !== 'undefined' /* out */) {
				props[newKey] = value
			}
		})
		return {
			terraform: {
				required_providers: {
					tls: '~> 2.1',
				},
			},
			resource: {
				tls_private_key: { [this.__name]: props },
			},
		}
	}

	/** @internal */
	public static readonly __kiteType = 'tf:tls:index/privateKey:PrivateKey'
	/** @internal */
	public static readonly __tfType = 'tls_private_key'

	/** @internal */
	public id() {
		return PrivateKey.__tfType + '.' + this.__name
	}
}

/**
 * The set of arguments for constructing a PrivateKey resource.
 */
export interface PrivateKeyArgs {
	/**
	 * The name of the algorithm to use for
	 * the key. Currently-supported values are "RSA" and "ECDSA".
	 */
	readonly algorithm: 'RSA' | 'ECDSA'
	/**
	 * When `algorithm` is "ECDSA", the name of the elliptic
	 * curve to use. May be any one of "P224", "P256", "P384" or "P521", with "P224" as the
	 * default.
	 */
	readonly ecdsaCurve?: 'P224' | 'P256' | 'P384' | 'P521'
	/**
	 * When `algorithm` is "RSA", the size of the generated
	 * RSA key in bits. Defaults to 2048.
	 */
	readonly rsaBits?: number
}
