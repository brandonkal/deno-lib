/**
 * @author Brandon Kalinowski
 * @copyright 2020 Brandon Kalinowski
 * @license Not Provided. Contact for details.
 */
// *** WARNING: this file was generated by the Kite Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as kite from 'https://deno.land/x/lib/kite.ts'
import * as inputs from './types/input.ts'
import * as outputs from './types/output.ts'

/**
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-tls/blob/master/website/docs/r/self_signed_cert.html.md.
 */
export class SelfSignedCert extends kite.Resource {
	/**
	 * List of keywords each describing a use that is permitted
	 * for the issued certificate. The valid keywords are listed below.
	 */
	public readonly allowedUses!: string[]
	/**
	 * The certificate data in PEM format.
	 */
	public readonly /*out*/ certPem!: string
	/**
	 * List of DNS names for which a certificate is being requested.
	 */
	public readonly dnsNames!: string[] | undefined
	/**
	 * Number of hours before the certificates expiry when a new certificate will be generated
	 */
	public readonly earlyRenewalHours!: number | undefined
	/**
	 * List of IP addresses for which a certificate is being requested.
	 */
	public readonly ipAddresses!: string[] | undefined
	/**
	 * Boolean controlling whether the CA flag will be set in the
	 * generated certificate. Defaults to `false`, meaning that the certificate does not represent
	 * a certificate authority.
	 */
	public readonly isCaCertificate!: boolean | undefined
	/**
	 * The name of the algorithm for the key provided
	 * in `privateKeyPem`.
	 */
	public readonly keyAlgorithm!: string
	/**
	 * PEM-encoded private key that the certificate will belong to
	 */
	public readonly privateKeyPem!: string
	public readonly /*out*/ readyForRenewal!: boolean
	/**
	 * If `true`, the certificate will include
	 * the subject key identifier. Defaults to `false`, in which case the subject
	 * key identifier is not set at all.
	 */
	public readonly setSubjectKeyId!: boolean | undefined
	/**
	 * The subject for which a certificate is being requested.
	 * This is a nested configuration block whose structure matches the
	 * corresponding block for `tls.CertRequest`.
	 */
	public readonly subjects!: outputs.SelfSignedCertSubject[]
	/**
	 * List of URIs for which a certificate is being requested.
	 */
	public readonly uris!: string[] | undefined
	/**
	 * The time until which the certificate is invalid, as an
	 * [RFC3339](https://tools.ietf.org/html/rfc3339) timestamp.
	 */
	public readonly /*out*/ validityEndTime!: string
	/**
	 * The number of hours after initial issuing that the
	 * certificate will become invalid.
	 */
	public readonly validityPeriodHours!: number
	/**
	 * The time after which the certificate is valid, as an
	 * [RFC3339](https://tools.ietf.org/html/rfc3339) timestamp.
	 */
	public readonly /*out*/ validityStartTime!: string

	/**
	 * Create a SelfSignedCert resource with the given unique name, arguments, and options.
	 *
	 * @param name The _unique_ name of the resource.
	 * @param args The arguments to use to populate this resource's properties.
	 */
	constructor(name: string, args: SelfSignedCertArgs) {
		let inputs: any = {}
		if (!args || args.allowedUses === undefined) {
			throw new Error("Missing required property 'allowedUses'")
		}
		if (!args || args.keyAlgorithm === undefined) {
			throw new Error("Missing required property 'keyAlgorithm'")
		}
		if (!args || args.privateKeyPem === undefined) {
			throw new Error("Missing required property 'privateKeyPem'")
		}
		if (!args || args.subjects === undefined) {
			throw new Error("Missing required property 'subjects'")
		}
		if (!args || args.validityPeriodHours === undefined) {
			throw new Error("Missing required property 'validityPeriodHours'")
		}
		inputs.allowedUses = args ? args.allowedUses : undefined
		inputs.dnsNames = args ? args.dnsNames : undefined
		inputs.earlyRenewalHours = args ? args.earlyRenewalHours : undefined
		inputs.ipAddresses = args ? args.ipAddresses : undefined
		inputs.isCaCertificate = args ? args.isCaCertificate : undefined
		inputs.keyAlgorithm = args ? args.keyAlgorithm : undefined
		inputs.privateKeyPem = args ? args.privateKeyPem : undefined
		inputs.setSubjectKeyId = args ? args.setSubjectKeyId : undefined
		inputs.subjects = args ? args.subjects : undefined
		inputs.uris = args ? args.uris : undefined
		inputs.validityPeriodHours = args ? args.validityPeriodHours : undefined
		super(name, inputs)
		this.setType(SelfSignedCert.__kiteType)
		this.certPem = `(( tf ${this.id()}.cert_pem ))` as any /*out*/
		this.readyForRenewal = `(( tf ${this.id()}.ready_for_renewal | boolean ))` as any /*out*/
		this.validityEndTime = `(( tf ${this.id()}.validity_end_time ))` as any /*out*/
		this.validityStartTime = `(( tf ${this.id()}.validity_start_time ))` as any /*out*/
	}
	/**
	 * Used to map camelCased properties to Terraform snake_case
	 * @internal
	 */
	static convertMap: Record<string, string> = {
		allowedUses: 'allowed_uses',
		dnsNames: 'dns_names',
		earlyRenewalHours: 'early_renewal_hours',
		ipAddresses: 'ip_addresses',
		isCaCertificate: 'is_ca_certificate',
		keyAlgorithm: 'key_algorithm',
		privateKeyPem: 'private_key_pem',
		setSubjectKeyId: 'set_subject_key_id',
		subjects: 'subject',
		uris: 'uris',
		validityPeriodHours: 'validity_period_hours',
		certPem: 'undefined',
		readyForRenewal: 'undefined',
		validityEndTime: 'undefined',
		validityStartTime: 'undefined',
	}

	/**
	 * Transforms the Resource instance into the Terraform JSON representation.
	 * @internal
	 */
	convert() {
		const props: any = {}
		Object.entries(this).forEach(([key, value]) => {
			const newKey = SelfSignedCert.convertMap[key]
			if (!newKey) {
				throw new Error(
					`Could not print key: ${key}. Not found in ${
						(this as any).__type
					} spec.`
				)
			}
			if (newKey !== 'undefined' /* out */) {
				props[newKey] = value
			}
		})
		return {
			terraform: {
				required_providers: {
					tls: '~> 2.1',
				},
			},
			resource: {
				tls_self_signed_cert: { [this.__name]: props },
			},
		}
	}

	/** @internal */
	public static readonly __kiteType =
		'tf:tls:index/selfSignedCert:SelfSignedCert'
	/** @internal */
	public static readonly __tfType = 'tls_self_signed_cert'

	/** @internal */
	public id() {
		return SelfSignedCert.__tfType + '.' + this.__name
	}
}

/**
 * The set of arguments for constructing a SelfSignedCert resource.
 */
export interface SelfSignedCertArgs {
	/**
	 * List of keywords each describing a use that is permitted
	 * for the issued certificate. The valid keywords are listed below.
	 */
	readonly allowedUses: string[]
	/**
	 * List of DNS names for which a certificate is being requested.
	 */
	readonly dnsNames?: string[]
	/**
	 * Number of hours before the certificates expiry when a new certificate will be generated
	 */
	readonly earlyRenewalHours?: number
	/**
	 * List of IP addresses for which a certificate is being requested.
	 */
	readonly ipAddresses?: string[]
	/**
	 * Boolean controlling whether the CA flag will be set in the
	 * generated certificate. Defaults to `false`, meaning that the certificate does not represent
	 * a certificate authority.
	 */
	readonly isCaCertificate?: boolean
	/**
	 * The name of the algorithm for the key provided
	 * in `privateKeyPem`.
	 */
	readonly keyAlgorithm: string
	/**
	 * PEM-encoded private key that the certificate will belong to
	 */
	readonly privateKeyPem: string
	/**
	 * If `true`, the certificate will include
	 * the subject key identifier. Defaults to `false`, in which case the subject
	 * key identifier is not set at all.
	 */
	readonly setSubjectKeyId?: boolean
	/**
	 * The subject for which a certificate is being requested.
	 * This is a nested configuration block whose structure matches the
	 * corresponding block for `tls.CertRequest`.
	 */
	readonly subjects: inputs.SelfSignedCertSubject[]
	/**
	 * List of URIs for which a certificate is being requested.
	 */
	readonly uris?: string[]
	/**
	 * The number of hours after initial issuing that the
	 * certificate will become invalid.
	 */
	readonly validityPeriodHours: number
}
