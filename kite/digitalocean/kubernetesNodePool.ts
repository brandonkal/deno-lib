/**
 * @author Brandon Kalinowski
 * @copyright 2020 Brandon Kalinowski
 * @license Not Provided. Contact for details.
 */
// *** WARNING: this file was generated by the Kite Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as kite from 'https://deno.land/x/lib/kite.ts'
import * as outputs from './types/output.ts'

import { DropletSlug } from './mod.ts'

/**
 * Provides a DigitalOcean Kubernetes node pool resource. While the default node pool must be defined in the `digitalocean.KubernetesCluster` resource, this resource can be used to add additional ones to a cluster.
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-digitalocean/blob/master/website/docs/r/kubernetes_node_pool.html.markdown.
 */
export class KubernetesNodePool extends kite.Resource {
	/**
	 * A computed field representing the actual number of nodes in the node pool, which is especially useful when auto-scaling is enabled.
	 */
	public readonly /*out*/ actualNodeCount!: number
	/**
	 * Enable auto-scaling of the number of nodes in the node pool within the given min/max range.
	 */
	public readonly autoScale!: boolean | undefined
	/**
	 * The ID of the Kubernetes cluster to which the node pool is associated.
	 */
	public readonly clusterId!: string
	/**
	 * If auto-scaling is enabled, this represents the maximum number of nodes that the node pool can be scaled up to.
	 */
	public readonly maxNodes!: number | undefined
	/**
	 * If auto-scaling is enabled, this represents the minimum number of nodes that the node pool can be scaled down to.
	 */
	public readonly minNodes!: number | undefined
	/**
	 * A name for the node pool.
	 */
	public readonly name!: string
	/**
	 * The number of Droplet instances in the node pool. If auto-scaling is enabled, this should only be set if the desired result is to explicitly reset the number of nodes to this value. If auto-scaling is enabled, and the node count is outside of the given min/max range, it will use the min nodes value.
	 */
	public readonly nodeCount!: number | undefined
	/**
	 * A list of nodes in the pool. Each node exports the following attributes:
	 * - `id` -  A unique ID that can be used to identify and reference the node.
	 * - `name` - The auto-generated name for the node.
	 * - `status` -  A string indicating the current status of the individual node.
	 * - `createdAt` - The date and time when the node was created.
	 * - `updatedAt` - The date and time when the node was last updated.
	 */
	public readonly /*out*/ nodes!: outputs.KubernetesNodePoolNode[]
	/**
	 * The slug identifier for the type of Droplet to be used as workers in the node pool.
	 */
	public readonly size!: DropletSlug
	/**
	 * A list of tag names to be applied to the Kubernetes cluster.
	 */
	public readonly tags!: string[] | undefined

	/**
	 * Create a KubernetesNodePool resource with the given unique name, arguments, and options.
	 *
	 * @param name The _unique_ name of the resource.
	 * @param args The arguments to use to populate this resource's properties.
	 */
	constructor(name: string, args: KubernetesNodePoolArgs) {
		let inputs: any = {}
		if (!args || args.clusterId === undefined) {
			throw new Error("Missing required property 'clusterId'")
		}
		if (!args || args.size === undefined) {
			throw new Error("Missing required property 'size'")
		}
		inputs.autoScale = args ? args.autoScale : undefined
		inputs.clusterId = args ? args.clusterId : undefined
		inputs.maxNodes = args ? args.maxNodes : undefined
		inputs.minNodes = args ? args.minNodes : undefined
		inputs.name = args ? args.name : undefined
		inputs.nodeCount = args ? args.nodeCount : undefined
		inputs.size = args ? args.size : undefined
		inputs.tags = args ? args.tags : undefined
		super(name, inputs)
		this.setType(KubernetesNodePool.__kiteType)
		this.actualNodeCount = `{{ tf ${this.id()}.actualNodeCount | number }}` as any /*out*/
		this.nodes = `{{ tf ${this.id()}.nodes }}` as any /*out*/
	}
	/**
	 * Used to map camelCased properties to Terraform snake_case
	 * @internal
	 */
	static convertMap: Record<string, string> = {
		autoScale: 'auto_scale',
		clusterId: 'cluster_id',
		maxNodes: 'max_nodes',
		minNodes: 'min_nodes',
		name: 'name',
		nodeCount: 'node_count',
		size: 'size',
		tags: 'tags',
		actualNodeCount: 'undefined',
		nodes: 'undefined',
	}

	/**
	 * Transforms the Resource instance into the Terraform JSON representation.
	 * @internal
	 */
	convert() {
		const props: any = {}
		Object.entries(this).forEach(([key, value]) => {
			const newKey = KubernetesNodePool.convertMap[key]
			if (!newKey) {
				throw new Error(
					`Could not print key: ${key}. Not found in ${
						(this as any).__type
					} spec.`
				)
			}
			if (newKey !== 'undefined' /* out */) {
				props[newKey] = value
			}
		})
		return {
			terraform: {
				required_providers: {
					digitalocean: '~> 1.13.0',
				},
			},
			resource: {
				digitalocean_kubernetes_node_pool: { [this.__name]: props },
			},
		}
	}

	/** @internal */
	public static readonly __kiteType =
		'tf:digitalocean:index/kubernetesNodePool:KubernetesNodePool'
	/** @internal */
	public static readonly __tfType = 'digitalocean_kubernetes_node_pool'

	/** @internal */
	public id() {
		return KubernetesNodePool.__tfType + '.' + this.__name
	}
}

/**
 * The set of arguments for constructing a KubernetesNodePool resource.
 */
export interface KubernetesNodePoolArgs {
	/**
	 * Enable auto-scaling of the number of nodes in the node pool within the given min/max range.
	 */
	readonly autoScale?: boolean
	/**
	 * The ID of the Kubernetes cluster to which the node pool is associated.
	 */
	readonly clusterId: string
	/**
	 * If auto-scaling is enabled, this represents the maximum number of nodes that the node pool can be scaled up to.
	 */
	readonly maxNodes?: number
	/**
	 * If auto-scaling is enabled, this represents the minimum number of nodes that the node pool can be scaled down to.
	 */
	readonly minNodes?: number
	/**
	 * A name for the node pool.
	 */
	readonly name?: string
	/**
	 * The number of Droplet instances in the node pool. If auto-scaling is enabled, this should only be set if the desired result is to explicitly reset the number of nodes to this value. If auto-scaling is enabled, and the node count is outside of the given min/max range, it will use the min nodes value.
	 */
	readonly nodeCount?: number
	/**
	 * The slug identifier for the type of Droplet to be used as workers in the node pool.
	 */
	readonly size: DropletSlug
	/**
	 * A list of tag names to be applied to the Kubernetes cluster.
	 */
	readonly tags?: string[]
}
