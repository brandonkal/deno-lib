/**
 * @author Brandon Kalinowski
 * @copyright 2020 Brandon Kalinowski
 * @license Not Provided. Contact for details.
 */
// *** WARNING: this file was generated by the Kite™️ Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as kite from 'https://deno.land/x/lib/kite.ts'

/**
 * Provides a DigitalOcean database resource. When creating a new database cluster, a default database with name `defaultdb` will be created. Then, this resource can be used to provide additional database inside the cluster.
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-digitalocean/blob/master/website/docs/r/database_db.html.markdown.
 */
export class DatabaseDb extends kite.Resource {
	/**
	 * The ID of the original source database cluster.
	 */
	public readonly clusterId!: string
	/**
	 * The name for the database.
	 */
	public readonly name!: string

	/**
	 * Create a DatabaseDb resource with the given unique name, arguments, and options.
	 *
	 * @param name The _unique_ name of the resource.
	 * @param args The arguments to use to populate this resource's properties.
	 */
	constructor(name: string, args: DatabaseDbArgs) {
		let inputs: any = {}
		if (!args || args.clusterId === undefined) {
			throw new Error("Missing required property 'clusterId'")
		}
		inputs.clusterId = args ? args.clusterId : undefined
		inputs.name = args ? args.name : undefined
		super(name, inputs)
		this.setType(DatabaseDb.__kiteType)
	}
	/**
	 * Used to map camelCased properties to Terraform snake_case
	 * @internal
	 */
	static convertMap: Record<string, string> = {
		clusterId: 'cluster_id',
		name: 'name',
	}

	/**
	 * Transforms the Resource instance into the Terraform JSON representation.
	 * @internal
	 */
	convert() {
		const props: any = {}
		Object.entries(this).forEach(([key, value]) => {
			const newKey = DatabaseDb.convertMap[key]
			if (!newKey) {
				throw new Error(
					`Could not print key: ${key}. Not found in ${
						(this as any).__type
					} spec.`
				)
			}
			if (newKey !== 'undefined' /* out */) {
				props[newKey] = value
			}
		})
		return {
			terraform: {
				required_providers: {
					digitalocean: '~> 1.13.0',
				},
			},
			resource: {
				digitalocean_database_db: { [this.__name]: props },
			},
		}
	}

	/** @internal */
	public static readonly __kiteType = 'tf:digitalocean:index:DatabaseDb'
	/** @internal */
	public static readonly __tfType = 'digitalocean_database_db'

	/** @internal */
	public id() {
		return DatabaseDb.__tfType + '.' + this.__name
	}
}

/**
 * The set of arguments for constructing a DatabaseDb resource.
 */
export interface DatabaseDbArgs {
	/**
	 * The ID of the original source database cluster.
	 */
	readonly clusterId: string
	/**
	 * The name for the database.
	 */
	readonly name?: string
}
