/**
 * @author Brandon Kalinowski
 * @copyright 2020 Brandon Kalinowski
 * @license Not Provided. Contact for details.
 */
// *** WARNING: this file was generated by the Kite™️ Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as kite from 'https://deno.land/x/lib/kite.ts'
import * as inputs from './types/input.ts'
import * as outputs from './types/output.ts'

import { DatabaseSlug, Region } from './mod.ts'

/**
 * Provides a DigitalOcean database cluster resource.
 *
 * ## Example Usage
 *
 * ### Create a new PostgreSQL database cluster
 * ```typescript
 * // NOTE: Generated example is valid Pulumi Code. Generally Kite™️ Code is similar but may differ.
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const postgresExample = new digitalocean.DatabaseCluster("postgres-example", {
 *     engine: "pg",
 *     nodeCount: 1,
 *     region: "nyc1",
 *     size: "db-s-1vcpu-1gb",
 *     version: "11",
 * });
 * ```
 *
 * ### Create a new MySQL database cluster
 * ```typescript
 * // NOTE: Generated example is valid Pulumi Code. Generally Kite™️ Code is similar but may differ.
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const mysqlExample = new digitalocean.DatabaseCluster("mysql-example", {
 *     engine: "mysql",
 *     nodeCount: 1,
 *     region: "nyc1",
 *     size: "db-s-1vcpu-1gb",
 * });
 * ```
 *
 * ### Create a new Redis database cluster
 * ```typescript
 * // NOTE: Generated example is valid Pulumi Code. Generally Kite™️ Code is similar but may differ.
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const redisExample = new digitalocean.DatabaseCluster("redis-example", {
 *     engine: "redis",
 *     nodeCount: 1,
 *     region: "nyc1",
 *     size: "db-s-1vcpu-1gb",
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-digitalocean/blob/master/website/docs/r/database_cluster.html.markdown.
 */
export class DatabaseCluster extends kite.Resource {
	/**
	 * Name of the cluster's default database.
	 */
	public readonly /*out*/ database!: string
	/**
	 * Database engine used by the cluster (ex. `pg` for PostreSQL, `mysql` for MySQL, or `redis` for Redis).
	 */
	public readonly engine!: string
	/**
	 * A string specifying the eviction policy for a Redis cluster. Valid values are: `noeviction`, `allkeysLru`, `allkeysRandom`, `volatileLru`, `volatileRandom`, or `volatileTtl`.
	 */
	public readonly evictionPolicy!: string | undefined
	/**
	 * Database cluster's hostname.
	 */
	public readonly /*out*/ host!: string
	/**
	 * Defines when the automatic maintenance should be performed for the database cluster.
	 */
	public readonly maintenanceWindows!:
		| outputs.DatabaseClusterMaintenanceWindow[]
		| undefined
	/**
	 * The name of the database cluster.
	 */
	public readonly name!: string
	/**
	 * Number of nodes that will be included in the cluster.
	 */
	public readonly nodeCount!: number
	/**
	 * Password for the cluster's default user.
	 */
	public readonly /*out*/ password!: string
	/**
	 * Network port that the database cluster is listening on.
	 */
	public readonly /*out*/ port!: number
	/**
	 * Same as `host`, but only accessible from resources within the account and in the same region.
	 */
	public readonly /*out*/ privateHost!: string
	/**
	 * Same as `uri`, but only accessible from resources within the account and in the same region.
	 */
	public readonly /*out*/ privateUri!: string
	/**
	 * DigitalOcean region where the cluster will reside.
	 */
	public readonly region!: Region
	/**
	 * Database Droplet size associated with the cluster (ex. `db-s-1vcpu-1gb`).
	 */
	public readonly size!: DatabaseSlug
	/**
	 * A comma separated string specifying the  SQL modes for a MySQL cluster.
	 */
	public readonly sqlMode!: string | undefined
	/**
	 * A list of tag names to be applied to the database cluster.
	 */
	public readonly tags!: string[] | undefined
	/**
	 * The full URI for connecting to the database cluster.
	 */
	public readonly /*out*/ uri!: string
	/**
	 * The uniform resource name of the database cluster.
	 */
	public readonly /*out*/ urn!: string
	/**
	 * Username for the cluster's default user.
	 */
	public readonly /*out*/ user!: string
	/**
	 * Engine version used by the cluster (ex. `11` for PostgreSQL 11).
	 */
	public readonly version!: string | undefined

	/**
	 * Create a DatabaseCluster resource with the given unique name, arguments, and options.
	 *
	 * @param name The _unique_ name of the resource.
	 * @param args The arguments to use to populate this resource's properties.
	 */
	constructor(name: string, args: DatabaseClusterArgs) {
		let inputs: any = {}
		if (!args || args.engine === undefined) {
			throw new Error("Missing required property 'engine'")
		}
		if (!args || args.nodeCount === undefined) {
			throw new Error("Missing required property 'nodeCount'")
		}
		if (!args || args.region === undefined) {
			throw new Error("Missing required property 'region'")
		}
		if (!args || args.size === undefined) {
			throw new Error("Missing required property 'size'")
		}
		inputs.engine = args ? args.engine : undefined
		inputs.evictionPolicy = args ? args.evictionPolicy : undefined
		inputs.maintenanceWindows = args ? args.maintenanceWindows : undefined
		inputs.name = args ? args.name : undefined
		inputs.nodeCount = args ? args.nodeCount : undefined
		inputs.region = args ? args.region : undefined
		inputs.size = args ? args.size : undefined
		inputs.sqlMode = args ? args.sqlMode : undefined
		inputs.tags = args ? args.tags : undefined
		inputs.version = args ? args.version : undefined
		super(name, inputs)
		this.setType(DatabaseCluster.__kiteType)
		this.database = `(( tf ${this.id()}.database ))` as any /*out*/
		this.host = `(( tf ${this.id()}.host ))` as any /*out*/
		this.password = `(( tf ${this.id()}.password ))` as any /*out*/
		this.port = `(( tf ${this.id()}.port | number ))` as any /*out*/
		this.privateHost = `(( tf ${this.id()}.private_host ))` as any /*out*/
		this.privateUri = `(( tf ${this.id()}.private_uri ))` as any /*out*/
		this.uri = `(( tf ${this.id()}.uri ))` as any /*out*/
		this.urn = `(( tf ${this.id()}.urn ))` as any /*out*/
		this.user = `(( tf ${this.id()}.user ))` as any /*out*/
	}
	/**
	 * Used to map camelCased properties to Terraform snake_case
	 * @internal
	 */
	static convertMap: Record<string, string> = {
		engine: 'engine',
		evictionPolicy: 'eviction_policy',
		maintenanceWindows: 'maintenance_window',
		name: 'name',
		nodeCount: 'node_count',
		region: 'region',
		size: 'size',
		sqlMode: 'sql_mode',
		tags: 'tags',
		version: 'version',
		database: 'undefined',
		host: 'undefined',
		password: 'undefined',
		port: 'undefined',
		privateHost: 'undefined',
		privateUri: 'undefined',
		uri: 'undefined',
		urn: 'undefined',
		user: 'undefined',
	}

	/**
	 * Transforms the Resource instance into the Terraform JSON representation.
	 * @internal
	 */
	convert() {
		const props: any = {}
		Object.entries(this).forEach(([key, value]) => {
			const newKey = DatabaseCluster.convertMap[key]
			if (!newKey) {
				throw new Error(
					`Could not print key: ${key}. Not found in ${
						(this as any).__type
					} spec.`
				)
			}
			if (newKey !== 'undefined' /* out */) {
				props[newKey] = value
			}
		})
		return {
			terraform: {
				required_providers: {
					digitalocean: '~> 1.13.0',
				},
			},
			resource: {
				digitalocean_database_cluster: { [this.__name]: props },
			},
		}
	}

	/** @internal */
	public static readonly __kiteType =
		'tf:digitalocean:index/databaseCluster:DatabaseCluster'
	/** @internal */
	public static readonly __tfType = 'digitalocean_database_cluster'

	/** @internal */
	public id() {
		return DatabaseCluster.__tfType + '.' + this.__name
	}
}

/**
 * The set of arguments for constructing a DatabaseCluster resource.
 */
export interface DatabaseClusterArgs {
	/**
	 * Database engine used by the cluster (ex. `pg` for PostreSQL, `mysql` for MySQL, or `redis` for Redis).
	 */
	readonly engine: string
	/**
	 * A string specifying the eviction policy for a Redis cluster. Valid values are: `noeviction`, `allkeysLru`, `allkeysRandom`, `volatileLru`, `volatileRandom`, or `volatileTtl`.
	 */
	readonly evictionPolicy?: string
	/**
	 * Defines when the automatic maintenance should be performed for the database cluster.
	 */
	readonly maintenanceWindows?: inputs.DatabaseClusterMaintenanceWindow[]
	/**
	 * The name of the database cluster.
	 */
	readonly name?: string
	/**
	 * Number of nodes that will be included in the cluster.
	 */
	readonly nodeCount: number
	/**
	 * DigitalOcean region where the cluster will reside.
	 */
	readonly region: Region
	/**
	 * Database Droplet size associated with the cluster (ex. `db-s-1vcpu-1gb`).
	 */
	readonly size: DatabaseSlug
	/**
	 * A comma separated string specifying the  SQL modes for a MySQL cluster.
	 */
	readonly sqlMode?: string
	/**
	 * A list of tag names to be applied to the database cluster.
	 */
	readonly tags?: string[]
	/**
	 * Engine version used by the cluster (ex. `11` for PostgreSQL 11).
	 */
	readonly version?: string
}
