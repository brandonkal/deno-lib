/**
 * @author Brandon Kalinowski
 * @copyright 2020 Brandon Kalinowski
 * @license Not Provided. Contact for details.
 */
// *** WARNING: this file was generated by the Kite Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as kite from 'https://deno.land/x/lib/kite.ts'

import { FilesystemType, Region } from './mod.ts'

/**
 * Provides a DigitalOcean Block Storage volume which can be attached to a Droplet in order to provide expanded storage.
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-digitalocean/blob/master/website/docs/r/volume.html.markdown.
 */
export class Volume extends kite.Resource {
	/**
	 * A free-form text field up to a limit of 1024 bytes to describe a block storage volume.
	 */
	public readonly description!: string | undefined
	/**
	 * A list of associated droplet ids.
	 */
	public readonly /*out*/ dropletIds!: number[]
	/**
	 * Filesystem label for the block storage volume.
	 */
	public readonly /*out*/ filesystemLabel!: string
	/**
	 * Filesystem type (`xfs` or `ext4`) for the block storage volume.
	 */
	public readonly filesystemType!: string
	/**
	 * Initial filesystem label for the block storage volume.
	 */
	public readonly initialFilesystemLabel!: string | undefined
	/**
	 * Initial filesystem type (`xfs` or `ext4`) for the block storage volume.
	 */
	public readonly initialFilesystemType!: FilesystemType | undefined
	/**
	 * A name for the block storage volume. Must be lowercase and be composed only of numbers, letters and "-", up to a limit of 64 characters.
	 */
	public readonly name!: string
	/**
	 * The region that the block storage volume will be created in.
	 */
	public readonly region!: Region
	/**
	 * The size of the block storage volume in GiB. If updated, can only be expanded.
	 */
	public readonly size!: number
	/**
	 * The ID of an existing volume snapshot from which the new volume will be created. If supplied, the region and size will be limitied on creation to that of the referenced snapshot
	 */
	public readonly snapshotId!: string | undefined
	/**
	 * A list of the tags to be applied to this Volume.
	 */
	public readonly tags!: string[] | undefined
	/**
	 * the uniform resource name for the volume.
	 */
	public readonly /*out*/ urn!: string

	/**
	 * Create a Volume resource with the given unique name, arguments, and options.
	 *
	 * @param name The _unique_ name of the resource.
	 * @param args The arguments to use to populate this resource's properties.
	 */
	constructor(name: string, args: VolumeArgs) {
		let inputs: any = {}
		if (!args || args.region === undefined) {
			throw new Error("Missing required property 'region'")
		}
		if (!args || args.size === undefined) {
			throw new Error("Missing required property 'size'")
		}
		inputs.description = args ? args.description : undefined
		inputs.filesystemType = args ? args.filesystemType : undefined
		inputs.initialFilesystemLabel = args
			? args.initialFilesystemLabel
			: undefined
		inputs.initialFilesystemType = args ? args.initialFilesystemType : undefined
		inputs.name = args ? args.name : undefined
		inputs.region = args ? args.region : undefined
		inputs.size = args ? args.size : undefined
		inputs.snapshotId = args ? args.snapshotId : undefined
		inputs.tags = args ? args.tags : undefined
		super(name, inputs)
		this.setType(Volume.__kiteType)
		this.dropletIds = `{{ tf ${this.id()}.dropletIds }}` as any /*out*/
		this.filesystemLabel = `{{ tf ${this.id()}.filesystemLabel }}` as any /*out*/
		this.urn = `{{ tf ${this.id()}.urn }}` as any /*out*/
	}
	/**
	 * Used to map camelCased properties to Terraform snake_case
	 * @internal
	 */
	static convertMap: Record<string, string> = {
		description: 'description',
		filesystemType: 'filesystem_type',
		initialFilesystemLabel: 'initial_filesystem_label',
		initialFilesystemType: 'initial_filesystem_type',
		name: 'name',
		region: 'region',
		size: 'size',
		snapshotId: 'snapshot_id',
		tags: 'tags',
		dropletIds: 'undefined',
		filesystemLabel: 'undefined',
		urn: 'undefined',
	}

	/**
	 * Transforms the Resource instance into the Terraform JSON representation.
	 * @internal
	 */
	convert() {
		const props: any = {}
		Object.entries(this).forEach(([key, value]) => {
			const newKey = Volume.convertMap[key]
			if (!newKey) {
				throw new Error(
					`Could not print key: ${key}. Not found in ${
						(this as any).__type
					} spec.`
				)
			}
			if (newKey !== 'undefined' /* out */) {
				props[newKey] = value
			}
		})
		return {
			terraform: {
				required_providers: {
					digitalocean: '~> 1.13.0',
				},
			},
			resource: {
				digitalocean_volume: { [this.__name]: props },
			},
		}
	}

	/** @internal */
	public static readonly __kiteType = 'tf:digitalocean:index/volume:Volume'
	/** @internal */
	public static readonly __tfType = 'digitalocean_volume'

	/** @internal */
	public id() {
		return Volume.__tfType + '.' + this.__name
	}
}

/**
 * The set of arguments for constructing a Volume resource.
 */
export interface VolumeArgs {
	/**
	 * A free-form text field up to a limit of 1024 bytes to describe a block storage volume.
	 */
	readonly description?: string
	/**
	 * Filesystem type (`xfs` or `ext4`) for the block storage volume.
	 */
	readonly filesystemType?: string
	/**
	 * Initial filesystem label for the block storage volume.
	 */
	readonly initialFilesystemLabel?: string
	/**
	 * Initial filesystem type (`xfs` or `ext4`) for the block storage volume.
	 */
	readonly initialFilesystemType?: FilesystemType
	/**
	 * A name for the block storage volume. Must be lowercase and be composed only of numbers, letters and "-", up to a limit of 64 characters.
	 */
	readonly name?: string
	/**
	 * The region that the block storage volume will be created in.
	 */
	readonly region: Region
	/**
	 * The size of the block storage volume in GiB. If updated, can only be expanded.
	 */
	readonly size: number
	/**
	 * The ID of an existing volume snapshot from which the new volume will be created. If supplied, the region and size will be limitied on creation to that of the referenced snapshot
	 */
	readonly snapshotId?: string
	/**
	 * A list of the tags to be applied to this Volume.
	 */
	readonly tags?: string[]
}
