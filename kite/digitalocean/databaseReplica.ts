/**
 * @author Brandon Kalinowski
 * @copyright 2020 Brandon Kalinowski
 * @license Not Provided. Contact for details.
 */
// *** WARNING: this file was generated by the Kite Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as kite from 'https://deno.land/x/lib/kite.ts'

import { DatabaseSlug, Region } from './mod.ts'

/**
 * Provides a DigitalOcean database replica resource.
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-digitalocean/blob/master/website/docs/r/database_replica.html.markdown.
 */
export class DatabaseReplica extends kite.Resource {
	/**
	 * The ID of the original source database cluster.
	 */
	public readonly clusterId!: string
	/**
	 * Name of the replica's default database.
	 */
	public readonly /*out*/ database!: string
	/**
	 * Database replica's hostname.
	 */
	public readonly /*out*/ host!: string
	/**
	 * The name for the database replica.
	 */
	public readonly name!: string
	/**
	 * Password for the replica's default user.
	 */
	public readonly /*out*/ password!: string
	/**
	 * Network port that the database replica is listening on.
	 */
	public readonly /*out*/ port!: number
	/**
	 * Same as `host`, but only accessible from resources within the account and in the same region.
	 */
	public readonly /*out*/ privateHost!: string
	/**
	 * Same as `uri`, but only accessible from resources within the account and in the same region.
	 */
	public readonly /*out*/ privateUri!: string
	/**
	 * DigitalOcean region where the replica will reside.
	 */
	public readonly region!: Region | undefined
	/**
	 * Database Droplet size associated with the replica (ex. `db-s-1vcpu-1gb`).
	 */
	public readonly size!: DatabaseSlug | undefined
	public readonly tags!: string[] | undefined
	/**
	 * The full URI for connecting to the database replica.
	 */
	public readonly /*out*/ uri!: string
	/**
	 * Username for the replica's default user.
	 */
	public readonly /*out*/ user!: string

	/**
	 * Create a DatabaseReplica resource with the given unique name, arguments, and options.
	 *
	 * @param name The _unique_ name of the resource.
	 * @param args The arguments to use to populate this resource's properties.
	 */
	constructor(name: string, args: DatabaseReplicaArgs) {
		let inputs: any = {}
		if (!args || args.clusterId === undefined) {
			throw new Error("Missing required property 'clusterId'")
		}
		inputs.clusterId = args ? args.clusterId : undefined
		inputs.name = args ? args.name : undefined
		inputs.region = args ? args.region : undefined
		inputs.size = args ? args.size : undefined
		inputs.tags = args ? args.tags : undefined
		super(name, inputs)
		this.setType(DatabaseReplica.__kiteType)
		this.database = `(( tf ${this.id()}.database ))` as any /*out*/
		this.host = `(( tf ${this.id()}.host ))` as any /*out*/
		this.password = `(( tf ${this.id()}.password ))` as any /*out*/
		this.port = `(( tf ${this.id()}.port | number ))` as any /*out*/
		this.privateHost = `(( tf ${this.id()}.privateHost ))` as any /*out*/
		this.privateUri = `(( tf ${this.id()}.privateUri ))` as any /*out*/
		this.uri = `(( tf ${this.id()}.uri ))` as any /*out*/
		this.user = `(( tf ${this.id()}.user ))` as any /*out*/
	}
	/**
	 * Used to map camelCased properties to Terraform snake_case
	 * @internal
	 */
	static convertMap: Record<string, string> = {
		clusterId: 'cluster_id',
		name: 'name',
		region: 'region',
		size: 'size',
		tags: 'tags',
		database: 'undefined',
		host: 'undefined',
		password: 'undefined',
		port: 'undefined',
		privateHost: 'undefined',
		privateUri: 'undefined',
		uri: 'undefined',
		user: 'undefined',
	}

	/**
	 * Transforms the Resource instance into the Terraform JSON representation.
	 * @internal
	 */
	convert() {
		const props: any = {}
		Object.entries(this).forEach(([key, value]) => {
			const newKey = DatabaseReplica.convertMap[key]
			if (!newKey) {
				throw new Error(
					`Could not print key: ${key}. Not found in ${
						(this as any).__type
					} spec.`
				)
			}
			if (newKey !== 'undefined' /* out */) {
				props[newKey] = value
			}
		})
		return {
			terraform: {
				required_providers: {
					digitalocean: '~> 1.13.0',
				},
			},
			resource: {
				digitalocean_database_replica: { [this.__name]: props },
			},
		}
	}

	/** @internal */
	public static readonly __kiteType =
		'tf:digitalocean:index/databaseReplica:DatabaseReplica'
	/** @internal */
	public static readonly __tfType = 'digitalocean_database_replica'

	/** @internal */
	public id() {
		return DatabaseReplica.__tfType + '.' + this.__name
	}
}

/**
 * The set of arguments for constructing a DatabaseReplica resource.
 */
export interface DatabaseReplicaArgs {
	/**
	 * The ID of the original source database cluster.
	 */
	readonly clusterId: string
	/**
	 * The name for the database replica.
	 */
	readonly name?: string
	/**
	 * DigitalOcean region where the replica will reside.
	 */
	readonly region?: Region
	/**
	 * Database Droplet size associated with the replica (ex. `db-s-1vcpu-1gb`).
	 */
	readonly size?: DatabaseSlug
	readonly tags?: string[]
}
