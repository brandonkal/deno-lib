/**
 * @author Brandon Kalinowski
 * @copyright 2020 Brandon Kalinowski
 * @license Not Provided. Contact for details.
 */
// *** WARNING: this file was generated by the Kite™️ Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as kite from 'https://deno.land/x/lib/kite.ts'

/**
 * Provides a DigitalOcean Project resource.
 *
 * Projects allow you to organize your resources into groups that fit the way you work.
 * You can group resources (like Droplets, Spaces, Load Balancers, domains, and Floating IPs)
 * in ways that align with the applications you host on DigitalOcean.
 *
 * The following resource types can be associated with a project:
 *
 * * Database Clusters
 * * Domains
 * * Droplets
 * * Floating IP
 * * Load Balancers
 * * Spaces Bucket
 * * Volume
 *
 * **Note:** A Terrafrom managed project cannot be set as a default project.
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-digitalocean/blob/master/website/docs/r/project.html.markdown.
 */
export class Project extends kite.Resource {
	/**
	 * the date and time when the project was created, (ISO8601)
	 */
	public readonly /*out*/ createdAt!: string
	/**
	 * the description of the project
	 */
	public readonly description!: string | undefined
	/**
	 * the environment of the project's resources. The possible values are: `Development`, `Staging`, `Production`)
	 */
	public readonly environment!: string | undefined
	/**
	 * The name of the Project
	 */
	public readonly name!: string
	/**
	 * the id of the project owner.
	 */
	public readonly /*out*/ ownerId!: number
	/**
	 * the unique universal identifier of the project owner.
	 */
	public readonly /*out*/ ownerUuid!: string
	/**
	 * the purpose of the project, (Default: "Web Application")
	 */
	public readonly purpose!: string | undefined
	/**
	 * a list of uniform resource names (URNs) for the resources associated with the project
	 */
	public readonly resources!: string[] | undefined
	/**
	 * the date and time when the project was last updated, (ISO8601)
	 */
	public readonly /*out*/ updatedAt!: string

	/**
	 * Create a Project resource with the given unique name, arguments, and options.
	 *
	 * @param name The _unique_ name of the resource.
	 * @param args The arguments to use to populate this resource's properties.
	 */
	constructor(name: string, args?: ProjectArgs) {
		let inputs: any = {}
		inputs.description = args ? args.description : undefined
		inputs.environment = args ? args.environment : undefined
		inputs.name = args ? args.name : undefined
		inputs.purpose = args ? args.purpose : undefined
		inputs.resources = args ? args.resources : undefined
		super(name, inputs)
		this.setType(Project.__kiteType)
		this.createdAt = `(( tf ${this.id()}.created_at ))` as any /*out*/
		this.ownerId = `(( tf ${this.id()}.owner_id | number ))` as any /*out*/
		this.ownerUuid = `(( tf ${this.id()}.owner_uuid ))` as any /*out*/
		this.updatedAt = `(( tf ${this.id()}.updated_at ))` as any /*out*/
	}
	/**
	 * Used to map camelCased properties to Terraform snake_case
	 * @internal
	 */
	static convertMap: Record<string, string> = {
		description: 'description',
		environment: 'environment',
		name: 'name',
		purpose: 'purpose',
		resources: 'resources',
		createdAt: 'undefined',
		ownerId: 'undefined',
		ownerUuid: 'undefined',
		updatedAt: 'undefined',
	}

	/**
	 * Transforms the Resource instance into the Terraform JSON representation.
	 * @internal
	 */
	convert() {
		const props: any = {}
		Object.entries(this).forEach(([key, value]) => {
			const newKey = Project.convertMap[key]
			if (!newKey) {
				throw new Error(
					`Could not print key: ${key}. Not found in ${
						(this as any).__type
					} spec.`
				)
			}
			if (newKey !== 'undefined' /* out */) {
				props[newKey] = value
			}
		})
		return {
			terraform: {
				required_providers: {
					digitalocean: '~> 1.13.0',
				},
			},
			resource: {
				digitalocean_project: { [this.__name]: props },
			},
		}
	}

	/** @internal */
	public static readonly __kiteType = 'tf:digitalocean:index/project:Project'
	/** @internal */
	public static readonly __tfType = 'digitalocean_project'

	/** @internal */
	public id() {
		return Project.__tfType + '.' + this.__name
	}
}

/**
 * The set of arguments for constructing a Project resource.
 */
export interface ProjectArgs {
	/**
	 * the description of the project
	 */
	readonly description?: string
	/**
	 * the environment of the project's resources. The possible values are: `Development`, `Staging`, `Production`)
	 */
	readonly environment?: string
	/**
	 * The name of the Project
	 */
	readonly name?: string
	/**
	 * the purpose of the project, (Default: "Web Application")
	 */
	readonly purpose?: string
	/**
	 * a list of uniform resource names (URNs) for the resources associated with the project
	 */
	readonly resources?: string[]
}
