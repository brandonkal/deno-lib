/**
 * @author Brandon Kalinowski
 * @copyright 2020 Brandon Kalinowski
 * @license Not Provided. Contact for details.
 */
// *** WARNING: this file was generated by the Kite™️ Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as kite from 'https://x.kite.run/lib/kite.ts'
import * as inputs from './types/input.ts'
import * as outputs from './types/output.ts'

/**
 * Provides a DigitalOcean Cloud Firewall resource. This can be used to create,
 * modify, and delete Firewalls.
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-digitalocean/blob/master/website/docs/r/firewall.html.markdown.
 */
export class Firewall extends kite.Resource {
	/**
	 * A time value given in ISO8601 combined date and time format
	 * that represents when the Firewall was created.
	 */
	public readonly /*out*/ createdAt!: string
	/**
	 * The list of the IDs of the Droplets assigned
	 * to the Firewall.
	 */
	public readonly dropletIds!: number[] | undefined
	/**
	 * The inbound access rule block for the Firewall.
	 * The `inboundRule` block is documented below.
	 */
	public readonly inboundRules!: outputs.FirewallInboundRule[] | undefined
	/**
	 * The Firewall name
	 */
	public readonly name!: string
	/**
	 * The outbound access rule block for the Firewall.
	 * The `outboundRule` block is documented below.
	 */
	public readonly outboundRules!: outputs.FirewallOutboundRule[] | undefined
	/**
	 * An list of object containing the fields, "dropletId",
	 * "removing", and "status".  It is provided to detail exactly which Droplets
	 * are having their security policies updated.  When empty, all changes
	 * have been successfully applied.
	 */
	public readonly /*out*/ pendingChanges!: outputs.FirewallPendingChange[]
	/**
	 * A status string indicating the current state of the Firewall.
	 * This can be "waiting", "succeeded", or "failed".
	 */
	public readonly /*out*/ status!: string
	/**
	 * The names of the Tags assigned to the Firewall.
	 */
	public readonly tags!: string[] | undefined

	/**
	 * Create a Firewall resource with the given unique name, arguments, and options.
	 *
	 * @param name The _unique_ name of the resource.
	 * @param args The arguments to use to populate this resource's properties.
	 */
	constructor(name: string, args?: FirewallArgs) {
		let inputs: any = {}
		inputs.dropletIds = args ? args.dropletIds : undefined
		inputs.inboundRules = args ? args.inboundRules : undefined
		inputs.name = args ? args.name : undefined
		inputs.outboundRules = args ? args.outboundRules : undefined
		inputs.tags = args ? args.tags : undefined
		super(name, inputs)
		this.setType(Firewall.__kiteType)
		this.createdAt = `(( tf ${this.id()}.created_at ))` as any /*out*/
		this.pendingChanges = `(( tf ${this.id()}.pending_changes ))` as any /*out*/
		this.status = `(( tf ${this.id()}.status ))` as any /*out*/
	}
	/**
	 * Used to map camelCased properties to Terraform snake_case
	 * @internal
	 */
	static convertMap: Record<string, string> = {
		dropletIds: 'droplet_ids',
		inboundRules: 'inbound_rule',
		name: 'name',
		outboundRules: 'outbound_rule',
		tags: 'tags',
		createdAt: 'undefined',
		pendingChanges: 'undefined',
		status: 'undefined',
	}

	/**
	 * Transforms the Resource instance into the Terraform JSON representation.
	 * @internal
	 */
	convert() {
		const props: any = {}
		Object.entries(this).forEach(([key, value]) => {
			const newKey = Firewall.convertMap[key]
			if (!newKey) {
				throw new Error(
					`Could not print key: ${key}. Not found in ${
						(this as any).__type
					} spec.`
				)
			}
			if (newKey !== 'undefined' /* out */) {
				props[newKey] = value
			}
		})
		return {
			terraform: {
				required_providers: {
					digitalocean: '~> 1.13.0',
				},
			},
			resource: {
				digitalocean_firewall: { [this.__name]: props },
			},
		}
	}

	/** @internal */
	public static readonly __kiteType = 'tf:digitalocean:index/firewall:Firewall'
	/** @internal */
	public static readonly __tfType = 'digitalocean_firewall'

	/** @internal */
	public id() {
		return Firewall.__tfType + '.' + this.__name
	}
}

/**
 * The set of arguments for constructing a Firewall resource.
 */
export interface FirewallArgs {
	/**
	 * The list of the IDs of the Droplets assigned
	 * to the Firewall.
	 */
	readonly dropletIds?: number[]
	/**
	 * The inbound access rule block for the Firewall.
	 * The `inboundRule` block is documented below.
	 */
	readonly inboundRules?: inputs.FirewallInboundRule[]
	/**
	 * The Firewall name
	 */
	readonly name?: string
	/**
	 * The outbound access rule block for the Firewall.
	 * The `outboundRule` block is documented below.
	 */
	readonly outboundRules?: inputs.FirewallOutboundRule[]
	/**
	 * The names of the Tags assigned to the Firewall.
	 */
	readonly tags?: string[]
}
