// *** Copyright 2020 Brandon Kalinowski. ***
// *** WARNING: this file was generated by the apigen generation tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as types from "./types.ts";
import * as kite from "../../kite.ts";
type Dictionary<K extends string, T> = { [P in K]?: T }

/**
 * version represents the semver Kubernetes version string of the definition these types were generated from.
 *
 * The generated API will generally work with other clusters but is guaranteed to work with this version.
 */
export const version = "{{{K8sVersion}}}";

{{#Groups}}
export namespace {{Group}} {
	{{#Versions}}
	export namespace {{Version}} {
		{{#Kinds}}
		/**
		 * {{{Comment}}}{{{DeprecationComment}}}
		 */
		export class {{Kind}} extends kite.Resource {
			{{#Properties}}
			{{{Comment}}}
			{{Name}}{{^Required}}?{{/Required}}{{#Required}}!{{/Required}}: {{{Type}}};

			{{/Properties}}

			{{#HasMeta}}
			/**
			* Create a {{Group}}.{{Version}}.{{Kind}} object with the given unique name and description.
			*
			* @param name The _unique_ name of the resource. Will configure metadata.name by default.
			* @param desc The description to use to populate this object's properties.
			*/
			constructor(name: string, desc{{DescQuestionMark}}: types.{{Group}}.{{Version}}.{{Kind}}) {
				const props: any = {}
				{{#Properties}}
				props.{{Name}} = {{{DefaultValue}}};
				{{/Properties}}

				super(name, props);
				this.setType(`k8s:{{Kind}}`)
			}
			{{/HasMeta}}
		}
		{{/Kinds}}
	}

	{{/Versions}}
}

{{/Groups}}

export { types }
