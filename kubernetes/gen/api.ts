// *** Copyright 2020 Brandon Kalinowski. ***
// *** WARNING: this file was generated by the apigen generation tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as types from './types.ts'
import * as kite from '../../kite.ts'
type Dictionary<K extends string, T> = { [P in K]?: T }

export namespace admissionregistration {
	export namespace v1 {
		/**
		 * MutatingWebhookConfiguration describes the configuration of and admission webhook that accept
		 * or reject and may change the object.
		 */
		export class MutatingWebhookConfiguration extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'admissionregistration.k8s.io/v1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'MutatingWebhookConfiguration'

			/**
			 * Standard object metadata; More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Webhooks is a list of webhooks and the affected resources and operations.
			 */
			webhooks?: types.admissionregistration.v1.MutatingWebhook[]

			/**
			 * Create a admissionregistration.v1.MutatingWebhookConfiguration object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.admissionregistration.v1.MutatingWebhookConfiguration
			) {
				const props: any = {}
				props.apiVersion = 'admissionregistration.k8s.io/v1'
				props.kind = 'MutatingWebhookConfiguration'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.webhooks = (desc && desc.webhooks) || undefined

				super(name, props)
				this.setType(`k8s:MutatingWebhookConfiguration`)
			}
		}
		/**
		 * MutatingWebhookConfigurationList is a list of MutatingWebhookConfiguration.
		 */
		export class MutatingWebhookConfigurationList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'admissionregistration.k8s.io/v1'

			/**
			 * List of MutatingWebhookConfiguration.
			 */
			items!: types.admissionregistration.v1.MutatingWebhookConfiguration[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'MutatingWebhookConfigurationList'

			/**
			 * Standard list metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a admissionregistration.v1.MutatingWebhookConfigurationList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.admissionregistration.v1.MutatingWebhookConfigurationList
			) {
				const props: any = {}
				props.apiVersion = 'admissionregistration.k8s.io/v1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'MutatingWebhookConfigurationList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:MutatingWebhookConfigurationList`)
			}
		}
		/**
		 * ValidatingWebhookConfiguration describes the configuration of and admission webhook that
		 * accept or reject and object without changing it.
		 */
		export class ValidatingWebhookConfiguration extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'admissionregistration.k8s.io/v1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'ValidatingWebhookConfiguration'

			/**
			 * Standard object metadata; More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Webhooks is a list of webhooks and the affected resources and operations.
			 */
			webhooks?: types.admissionregistration.v1.ValidatingWebhook[]

			/**
			 * Create a admissionregistration.v1.ValidatingWebhookConfiguration object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.admissionregistration.v1.ValidatingWebhookConfiguration
			) {
				const props: any = {}
				props.apiVersion = 'admissionregistration.k8s.io/v1'
				props.kind = 'ValidatingWebhookConfiguration'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.webhooks = (desc && desc.webhooks) || undefined

				super(name, props)
				this.setType(`k8s:ValidatingWebhookConfiguration`)
			}
		}
		/**
		 * ValidatingWebhookConfigurationList is a list of ValidatingWebhookConfiguration.
		 */
		export class ValidatingWebhookConfigurationList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'admissionregistration.k8s.io/v1'

			/**
			 * List of ValidatingWebhookConfiguration.
			 */
			items!: types.admissionregistration.v1.ValidatingWebhookConfiguration[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'ValidatingWebhookConfigurationList'

			/**
			 * Standard list metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a admissionregistration.v1.ValidatingWebhookConfigurationList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.admissionregistration.v1.ValidatingWebhookConfigurationList
			) {
				const props: any = {}
				props.apiVersion = 'admissionregistration.k8s.io/v1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'ValidatingWebhookConfigurationList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:ValidatingWebhookConfigurationList`)
			}
		}
	}

	export namespace v1beta1 {
		/**
		 * MutatingWebhookConfiguration describes the configuration of and admission webhook that accept
		 * or reject and may change the object.
		 *
		 * @deprecated admissionregistration/v1beta1/MutatingWebhookConfiguration is deprecated by
		 * admissionregistration/v1/MutatingWebhookConfiguration and not supported by Kubernetes v1.19+
		 * clusters.
		 */
		export class MutatingWebhookConfiguration extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'admissionregistration.k8s.io/v1beta1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'MutatingWebhookConfiguration'

			/**
			 * Standard object metadata; More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Webhooks is a list of webhooks and the affected resources and operations.
			 */
			webhooks?: types.admissionregistration.v1beta1.MutatingWebhook[]

			/**
			 * Create a admissionregistration.v1beta1.MutatingWebhookConfiguration object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.admissionregistration.v1beta1.MutatingWebhookConfiguration
			) {
				const props: any = {}
				props.apiVersion = 'admissionregistration.k8s.io/v1beta1'
				props.kind = 'MutatingWebhookConfiguration'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.webhooks = (desc && desc.webhooks) || undefined

				super(name, props)
				this.setType(`k8s:MutatingWebhookConfiguration`)
			}
		}
		/**
		 * MutatingWebhookConfigurationList is a list of MutatingWebhookConfiguration.
		 */
		export class MutatingWebhookConfigurationList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'admissionregistration.k8s.io/v1beta1'

			/**
			 * List of MutatingWebhookConfiguration.
			 */
			items!: types.admissionregistration.v1beta1.MutatingWebhookConfiguration[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'MutatingWebhookConfigurationList'

			/**
			 * Standard list metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a admissionregistration.v1beta1.MutatingWebhookConfigurationList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.admissionregistration.v1beta1.MutatingWebhookConfigurationList
			) {
				const props: any = {}
				props.apiVersion = 'admissionregistration.k8s.io/v1beta1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'MutatingWebhookConfigurationList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:MutatingWebhookConfigurationList`)
			}
		}
		/**
		 * ValidatingWebhookConfiguration describes the configuration of and admission webhook that
		 * accept or reject and object without changing it.
		 *
		 * @deprecated admissionregistration/v1beta1/ValidatingWebhookConfiguration is deprecated by
		 * admissionregistration/v1/ValidatingWebhookConfiguration and not supported by Kubernetes
		 * v1.19+ clusters.
		 */
		export class ValidatingWebhookConfiguration extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'admissionregistration.k8s.io/v1beta1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'ValidatingWebhookConfiguration'

			/**
			 * Standard object metadata; More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Webhooks is a list of webhooks and the affected resources and operations.
			 */
			webhooks?: types.admissionregistration.v1beta1.ValidatingWebhook[]

			/**
			 * Create a admissionregistration.v1beta1.ValidatingWebhookConfiguration object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.admissionregistration.v1beta1.ValidatingWebhookConfiguration
			) {
				const props: any = {}
				props.apiVersion = 'admissionregistration.k8s.io/v1beta1'
				props.kind = 'ValidatingWebhookConfiguration'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.webhooks = (desc && desc.webhooks) || undefined

				super(name, props)
				this.setType(`k8s:ValidatingWebhookConfiguration`)
			}
		}
		/**
		 * ValidatingWebhookConfigurationList is a list of ValidatingWebhookConfiguration.
		 */
		export class ValidatingWebhookConfigurationList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'admissionregistration.k8s.io/v1beta1'

			/**
			 * List of ValidatingWebhookConfiguration.
			 */
			items!: types.admissionregistration.v1beta1.ValidatingWebhookConfiguration[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'ValidatingWebhookConfigurationList'

			/**
			 * Standard list metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a admissionregistration.v1beta1.ValidatingWebhookConfigurationList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.admissionregistration.v1beta1.ValidatingWebhookConfigurationList
			) {
				const props: any = {}
				props.apiVersion = 'admissionregistration.k8s.io/v1beta1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'ValidatingWebhookConfigurationList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:ValidatingWebhookConfigurationList`)
			}
		}
	}
}

export namespace apiextensions {
	export namespace v1 {
		/**
		 * CustomResourceDefinition represents a resource that should be exposed on the API server.  Its
		 * name MUST be in the format <.spec.name>.<.spec.group>.
		 */
		export class CustomResourceDefinition extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'apiextensions.k8s.io/v1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'CustomResourceDefinition'

			metadata!: types.meta.v1.ObjectMeta

			/**
			 * spec describes how the user wants the resources to appear
			 */
			spec!: types.apiextensions.v1.CustomResourceDefinitionSpec

			/**
			 * Create a apiextensions.v1.CustomResourceDefinition object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.apiextensions.v1.CustomResourceDefinition
			) {
				const props: any = {}
				props.apiVersion = 'apiextensions.k8s.io/v1'
				props.kind = 'CustomResourceDefinition'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:CustomResourceDefinition`)
			}
		}
		/**
		 * CustomResourceDefinitionList is a list of CustomResourceDefinition objects.
		 */
		export class CustomResourceDefinitionList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'apiextensions.k8s.io/v1'

			/**
			 * items list individual CustomResourceDefinition objects
			 */
			items!: types.apiextensions.v1.CustomResourceDefinition[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'CustomResourceDefinitionList'

			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a apiextensions.v1.CustomResourceDefinitionList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.apiextensions.v1.CustomResourceDefinitionList
			) {
				const props: any = {}
				props.apiVersion = 'apiextensions.k8s.io/v1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'CustomResourceDefinitionList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:CustomResourceDefinitionList`)
			}
		}
	}

	export namespace v1beta1 {
		/**
		 * CustomResourceDefinition represents a resource that should be exposed on the API server.  Its
		 * name MUST be in the format <.spec.name>.<.spec.group>.
		 *
		 * @deprecated apiextensions/v1beta1/CustomResourceDefinition is deprecated by
		 * apiextensions/v1/CustomResourceDefinition and not supported by Kubernetes v1.19+ clusters.
		 */
		export class CustomResourceDefinition extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'apiextensions.k8s.io/v1beta1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'CustomResourceDefinition'

			metadata!: types.meta.v1.ObjectMeta

			/**
			 * spec describes how the user wants the resources to appear
			 */
			spec!: types.apiextensions.v1beta1.CustomResourceDefinitionSpec

			/**
			 * Create a apiextensions.v1beta1.CustomResourceDefinition object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.apiextensions.v1beta1.CustomResourceDefinition
			) {
				const props: any = {}
				props.apiVersion = 'apiextensions.k8s.io/v1beta1'
				props.kind = 'CustomResourceDefinition'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:CustomResourceDefinition`)
			}
		}
		/**
		 * CustomResourceDefinitionList is a list of CustomResourceDefinition objects.
		 */
		export class CustomResourceDefinitionList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'apiextensions.k8s.io/v1beta1'

			/**
			 * items list individual CustomResourceDefinition objects
			 */
			items!: types.apiextensions.v1beta1.CustomResourceDefinition[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'CustomResourceDefinitionList'

			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a apiextensions.v1beta1.CustomResourceDefinitionList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.apiextensions.v1beta1.CustomResourceDefinitionList
			) {
				const props: any = {}
				props.apiVersion = 'apiextensions.k8s.io/v1beta1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'CustomResourceDefinitionList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:CustomResourceDefinitionList`)
			}
		}
	}
}

export namespace apiregistration {
	export namespace v1 {
		/**
		 * APIService represents a server for a particular GroupVersion. Name must be "version.group".
		 */
		export class APIService extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'apiregistration.k8s.io/v1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'APIService'

			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Spec contains information for locating and communicating with a server
			 */
			spec!: types.apiregistration.v1.APIServiceSpec

			/**
			 * Create a apiregistration.v1.APIService object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.apiregistration.v1.APIService) {
				const props: any = {}
				props.apiVersion = 'apiregistration.k8s.io/v1'
				props.kind = 'APIService'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:APIService`)
			}
		}
		/**
		 * APIServiceList is a list of APIService objects.
		 */
		export class APIServiceList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'apiregistration.k8s.io/v1'

			items!: types.apiregistration.v1.APIService[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'APIServiceList'

			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a apiregistration.v1.APIServiceList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.apiregistration.v1.APIServiceList) {
				const props: any = {}
				props.apiVersion = 'apiregistration.k8s.io/v1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'APIServiceList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:APIServiceList`)
			}
		}
	}

	export namespace v1beta1 {
		/**
		 * APIService represents a server for a particular GroupVersion. Name must be "version.group".
		 */
		export class APIService extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'apiregistration.k8s.io/v1beta1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'APIService'

			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Spec contains information for locating and communicating with a server
			 */
			spec!: types.apiregistration.v1beta1.APIServiceSpec

			/**
			 * Create a apiregistration.v1beta1.APIService object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.apiregistration.v1beta1.APIService
			) {
				const props: any = {}
				props.apiVersion = 'apiregistration.k8s.io/v1beta1'
				props.kind = 'APIService'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:APIService`)
			}
		}
		/**
		 * APIServiceList is a list of APIService objects.
		 */
		export class APIServiceList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'apiregistration.k8s.io/v1beta1'

			items!: types.apiregistration.v1beta1.APIService[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'APIServiceList'

			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a apiregistration.v1beta1.APIServiceList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.apiregistration.v1beta1.APIServiceList
			) {
				const props: any = {}
				props.apiVersion = 'apiregistration.k8s.io/v1beta1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'APIServiceList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:APIServiceList`)
			}
		}
	}
}

export namespace apps {
	export namespace v1 {
		/**
		 * ControllerRevision implements an immutable snapshot of state data. Clients are responsible
		 * for serializing and deserializing the objects that contain their internal state. Once a
		 * ControllerRevision has been successfully created, it can not be updated. The API Server will
		 * fail validation of all requests that attempt to mutate the Data field. ControllerRevisions
		 * may, however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet
		 * controllers for update and rollback, this object is beta. However, it may be subject to name
		 * and representation changes in future releases, and clients should not depend on its
		 * stability. It is primarily for internal use by controllers.
		 */
		export class ControllerRevision extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'apps/v1'

			/**
			 * Data is the serialized representation of the state.
			 */
			data?: Dictionary<string, string>

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'ControllerRevision'

			/**
			 * Standard object's metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Revision indicates the revision of the state represented by Data.
			 */
			revision!: number

			/**
			 * Create a apps.v1.ControllerRevision object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.apps.v1.ControllerRevision) {
				const props: any = {}
				props.apiVersion = 'apps/v1'
				props.data = (desc && desc.data) || undefined
				props.kind = 'ControllerRevision'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.revision = (desc && desc.revision) || undefined

				super(name, props)
				this.setType(`k8s:ControllerRevision`)
			}
		}
		/**
		 * ControllerRevisionList is a resource containing a list of ControllerRevision objects.
		 */
		export class ControllerRevisionList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'apps/v1'

			/**
			 * Items is the list of ControllerRevisions
			 */
			items!: types.apps.v1.ControllerRevision[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'ControllerRevisionList'

			/**
			 * More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a apps.v1.ControllerRevisionList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.apps.v1.ControllerRevisionList) {
				const props: any = {}
				props.apiVersion = 'apps/v1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'ControllerRevisionList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:ControllerRevisionList`)
			}
		}
		/**
		 * DaemonSet represents the configuration of a daemon set.
		 */
		export class DaemonSet extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'apps/v1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'DaemonSet'

			/**
			 * Standard object's metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * The desired behavior of this daemon set. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
			 */
			spec!: types.apps.v1.DaemonSetSpec

			/**
			 * Create a apps.v1.DaemonSet object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.apps.v1.DaemonSet) {
				const props: any = {}
				props.apiVersion = 'apps/v1'
				props.kind = 'DaemonSet'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:DaemonSet`)
			}
		}
		/**
		 * DaemonSetList is a collection of daemon sets.
		 */
		export class DaemonSetList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'apps/v1'

			/**
			 * A list of daemon sets.
			 */
			items!: types.apps.v1.DaemonSet[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'DaemonSetList'

			/**
			 * Standard list metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a apps.v1.DaemonSetList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.apps.v1.DaemonSetList) {
				const props: any = {}
				props.apiVersion = 'apps/v1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'DaemonSetList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:DaemonSetList`)
			}
		}
		/**
		 * Deployment enables declarative updates for Pods and ReplicaSets.
		 */
		export class Deployment extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'apps/v1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'Deployment'

			/**
			 * Standard object metadata.
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Specification of the desired behavior of the Deployment.
			 */
			spec!: types.apps.v1.DeploymentSpec

			/**
			 * Create a apps.v1.Deployment object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.apps.v1.Deployment) {
				const props: any = {}
				props.apiVersion = 'apps/v1'
				props.kind = 'Deployment'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:Deployment`)
			}
		}
		/**
		 * DeploymentList is a list of Deployments.
		 */
		export class DeploymentList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'apps/v1'

			/**
			 * Items is the list of Deployments.
			 */
			items!: types.apps.v1.Deployment[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'DeploymentList'

			/**
			 * Standard list metadata.
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a apps.v1.DeploymentList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.apps.v1.DeploymentList) {
				const props: any = {}
				props.apiVersion = 'apps/v1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'DeploymentList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:DeploymentList`)
			}
		}
		/**
		 * ReplicaSet ensures that a specified number of pod replicas are running at any given time.
		 */
		export class ReplicaSet extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'apps/v1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'ReplicaSet'

			/**
			 * If the Labels of a ReplicaSet are empty, they are defaulted to be the same as the Pod(s)
			 * that the ReplicaSet manages. Standard object's metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Spec defines the specification of the desired behavior of the ReplicaSet. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
			 */
			spec!: types.apps.v1.ReplicaSetSpec

			/**
			 * Create a apps.v1.ReplicaSet object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.apps.v1.ReplicaSet) {
				const props: any = {}
				props.apiVersion = 'apps/v1'
				props.kind = 'ReplicaSet'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:ReplicaSet`)
			}
		}
		/**
		 * ReplicaSetList is a collection of ReplicaSets.
		 */
		export class ReplicaSetList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'apps/v1'

			/**
			 * List of ReplicaSets. More info:
			 * https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller
			 */
			items!: types.apps.v1.ReplicaSet[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'ReplicaSetList'

			/**
			 * Standard list metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a apps.v1.ReplicaSetList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.apps.v1.ReplicaSetList) {
				const props: any = {}
				props.apiVersion = 'apps/v1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'ReplicaSetList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:ReplicaSetList`)
			}
		}
		/**
		 * StatefulSet represents a set of pods with consistent identities. Identities are defined as:
		 *  - Network: A single stable DNS and hostname.
		 *  - Storage: As many VolumeClaims as requested.
		 * The StatefulSet guarantees that a given network identity will always map to the same storage
		 * identity.
		 */
		export class StatefulSet extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'apps/v1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'StatefulSet'

			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Spec defines the desired identities of pods in this set.
			 */
			spec!: types.apps.v1.StatefulSetSpec

			/**
			 * Create a apps.v1.StatefulSet object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.apps.v1.StatefulSet) {
				const props: any = {}
				props.apiVersion = 'apps/v1'
				props.kind = 'StatefulSet'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:StatefulSet`)
			}
		}
		/**
		 * StatefulSetList is a collection of StatefulSets.
		 */
		export class StatefulSetList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'apps/v1'

			items!: types.apps.v1.StatefulSet[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'StatefulSetList'

			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a apps.v1.StatefulSetList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.apps.v1.StatefulSetList) {
				const props: any = {}
				props.apiVersion = 'apps/v1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'StatefulSetList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:StatefulSetList`)
			}
		}
	}
}

export namespace auditregistration {
	export namespace v1alpha1 {
		/**
		 * AuditSink represents a cluster level audit sink
		 */
		export class AuditSink extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'auditregistration.k8s.io/v1alpha1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'AuditSink'

			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Spec defines the audit configuration spec
			 */
			spec!: types.auditregistration.v1alpha1.AuditSinkSpec

			/**
			 * Create a auditregistration.v1alpha1.AuditSink object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.auditregistration.v1alpha1.AuditSink
			) {
				const props: any = {}
				props.apiVersion = 'auditregistration.k8s.io/v1alpha1'
				props.kind = 'AuditSink'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:AuditSink`)
			}
		}
		/**
		 * AuditSinkList is a list of AuditSink items.
		 */
		export class AuditSinkList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'auditregistration.k8s.io/v1alpha1'

			/**
			 * List of audit configurations.
			 */
			items!: types.auditregistration.v1alpha1.AuditSink[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'AuditSinkList'

			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a auditregistration.v1alpha1.AuditSinkList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.auditregistration.v1alpha1.AuditSinkList
			) {
				const props: any = {}
				props.apiVersion = 'auditregistration.k8s.io/v1alpha1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'AuditSinkList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:AuditSinkList`)
			}
		}
	}
}

export namespace authentication {
	export namespace v1 {
		/**
		 * TokenRequest requests a token for a given service account.
		 */
		export class TokenRequest extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'authentication.k8s.io/v1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'TokenRequest'

			metadata!: types.meta.v1.ObjectMeta

			spec!: types.authentication.v1.TokenRequestSpec

			/**
			 * Create a authentication.v1.TokenRequest object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.authentication.v1.TokenRequest) {
				const props: any = {}
				props.apiVersion = 'authentication.k8s.io/v1'
				props.kind = 'TokenRequest'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:TokenRequest`)
			}
		}
		/**
		 * TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may
		 * be cached by the webhook token authenticator plugin in the kube-apiserver.
		 */
		export class TokenReview extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'authentication.k8s.io/v1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'TokenReview'

			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Spec holds information about the request being evaluated
			 */
			spec!: types.authentication.v1.TokenReviewSpec

			/**
			 * Create a authentication.v1.TokenReview object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.authentication.v1.TokenReview) {
				const props: any = {}
				props.apiVersion = 'authentication.k8s.io/v1'
				props.kind = 'TokenReview'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:TokenReview`)
			}
		}
	}

	export namespace v1beta1 {
		/**
		 * TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may
		 * be cached by the webhook token authenticator plugin in the kube-apiserver.
		 */
		export class TokenReview extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'authentication.k8s.io/v1beta1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'TokenReview'

			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Spec holds information about the request being evaluated
			 */
			spec!: types.authentication.v1beta1.TokenReviewSpec

			/**
			 * Create a authentication.v1beta1.TokenReview object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.authentication.v1beta1.TokenReview
			) {
				const props: any = {}
				props.apiVersion = 'authentication.k8s.io/v1beta1'
				props.kind = 'TokenReview'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:TokenReview`)
			}
		}
	}
}

export namespace authorization {
	export namespace v1 {
		/**
		 * LocalSubjectAccessReview checks whether or not a user or group can perform an action in a
		 * given namespace. Having a namespace scoped resource makes it much easier to grant namespace
		 * scoped policy that includes permissions checking.
		 */
		export class LocalSubjectAccessReview extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'authorization.k8s.io/v1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'LocalSubjectAccessReview'

			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Spec holds information about the request being evaluated.  spec.namespace must be equal to
			 * the namespace you made the request against.  If empty, it is defaulted.
			 */
			spec!: types.authorization.v1.SubjectAccessReviewSpec

			/**
			 * Create a authorization.v1.LocalSubjectAccessReview object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.authorization.v1.LocalSubjectAccessReview
			) {
				const props: any = {}
				props.apiVersion = 'authorization.k8s.io/v1'
				props.kind = 'LocalSubjectAccessReview'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:LocalSubjectAccessReview`)
			}
		}
		/**
		 * SelfSubjectAccessReview checks whether or the current user can perform an action.  Not
		 * filling in a spec.namespace means "in all namespaces".  Self is a special case, because users
		 * should always be able to check whether they can perform an action
		 */
		export class SelfSubjectAccessReview extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'authorization.k8s.io/v1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'SelfSubjectAccessReview'

			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Spec holds information about the request being evaluated.  user and groups must be empty
			 */
			spec!: types.authorization.v1.SelfSubjectAccessReviewSpec

			/**
			 * Create a authorization.v1.SelfSubjectAccessReview object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.authorization.v1.SelfSubjectAccessReview
			) {
				const props: any = {}
				props.apiVersion = 'authorization.k8s.io/v1'
				props.kind = 'SelfSubjectAccessReview'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:SelfSubjectAccessReview`)
			}
		}
		/**
		 * SelfSubjectRulesReview enumerates the set of actions the current user can perform within a
		 * namespace. The returned list of actions may be incomplete depending on the server's
		 * authorization mode, and any errors experienced during the evaluation. SelfSubjectRulesReview
		 * should be used by UIs to show/hide actions, or to quickly let an end user reason about their
		 * permissions. It should NOT Be used by external systems to drive authorization decisions as
		 * this raises confused deputy, cache lifetime/revocation, and correctness concerns.
		 * SubjectAccessReview, and LocalAccessReview are the correct way to defer authorization
		 * decisions to the API server.
		 */
		export class SelfSubjectRulesReview extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'authorization.k8s.io/v1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'SelfSubjectRulesReview'

			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Spec holds information about the request being evaluated.
			 */
			spec!: types.authorization.v1.SelfSubjectRulesReviewSpec

			/**
			 * Create a authorization.v1.SelfSubjectRulesReview object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.authorization.v1.SelfSubjectRulesReview
			) {
				const props: any = {}
				props.apiVersion = 'authorization.k8s.io/v1'
				props.kind = 'SelfSubjectRulesReview'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:SelfSubjectRulesReview`)
			}
		}
		/**
		 * SubjectAccessReview checks whether or not a user or group can perform an action.
		 */
		export class SubjectAccessReview extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'authorization.k8s.io/v1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'SubjectAccessReview'

			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Spec holds information about the request being evaluated
			 */
			spec!: types.authorization.v1.SubjectAccessReviewSpec

			/**
			 * Create a authorization.v1.SubjectAccessReview object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.authorization.v1.SubjectAccessReview
			) {
				const props: any = {}
				props.apiVersion = 'authorization.k8s.io/v1'
				props.kind = 'SubjectAccessReview'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:SubjectAccessReview`)
			}
		}
	}

	export namespace v1beta1 {
		/**
		 * LocalSubjectAccessReview checks whether or not a user or group can perform an action in a
		 * given namespace. Having a namespace scoped resource makes it much easier to grant namespace
		 * scoped policy that includes permissions checking.
		 */
		export class LocalSubjectAccessReview extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'authorization.k8s.io/v1beta1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'LocalSubjectAccessReview'

			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Spec holds information about the request being evaluated.  spec.namespace must be equal to
			 * the namespace you made the request against.  If empty, it is defaulted.
			 */
			spec!: types.authorization.v1beta1.SubjectAccessReviewSpec

			/**
			 * Create a authorization.v1beta1.LocalSubjectAccessReview object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.authorization.v1beta1.LocalSubjectAccessReview
			) {
				const props: any = {}
				props.apiVersion = 'authorization.k8s.io/v1beta1'
				props.kind = 'LocalSubjectAccessReview'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:LocalSubjectAccessReview`)
			}
		}
		/**
		 * SelfSubjectAccessReview checks whether or the current user can perform an action.  Not
		 * filling in a spec.namespace means "in all namespaces".  Self is a special case, because users
		 * should always be able to check whether they can perform an action
		 */
		export class SelfSubjectAccessReview extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'authorization.k8s.io/v1beta1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'SelfSubjectAccessReview'

			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Spec holds information about the request being evaluated.  user and groups must be empty
			 */
			spec!: types.authorization.v1beta1.SelfSubjectAccessReviewSpec

			/**
			 * Create a authorization.v1beta1.SelfSubjectAccessReview object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.authorization.v1beta1.SelfSubjectAccessReview
			) {
				const props: any = {}
				props.apiVersion = 'authorization.k8s.io/v1beta1'
				props.kind = 'SelfSubjectAccessReview'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:SelfSubjectAccessReview`)
			}
		}
		/**
		 * SelfSubjectRulesReview enumerates the set of actions the current user can perform within a
		 * namespace. The returned list of actions may be incomplete depending on the server's
		 * authorization mode, and any errors experienced during the evaluation. SelfSubjectRulesReview
		 * should be used by UIs to show/hide actions, or to quickly let an end user reason about their
		 * permissions. It should NOT Be used by external systems to drive authorization decisions as
		 * this raises confused deputy, cache lifetime/revocation, and correctness concerns.
		 * SubjectAccessReview, and LocalAccessReview are the correct way to defer authorization
		 * decisions to the API server.
		 */
		export class SelfSubjectRulesReview extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'authorization.k8s.io/v1beta1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'SelfSubjectRulesReview'

			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Spec holds information about the request being evaluated.
			 */
			spec!: types.authorization.v1beta1.SelfSubjectRulesReviewSpec

			/**
			 * Create a authorization.v1beta1.SelfSubjectRulesReview object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.authorization.v1beta1.SelfSubjectRulesReview
			) {
				const props: any = {}
				props.apiVersion = 'authorization.k8s.io/v1beta1'
				props.kind = 'SelfSubjectRulesReview'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:SelfSubjectRulesReview`)
			}
		}
		/**
		 * SubjectAccessReview checks whether or not a user or group can perform an action.
		 */
		export class SubjectAccessReview extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'authorization.k8s.io/v1beta1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'SubjectAccessReview'

			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Spec holds information about the request being evaluated
			 */
			spec!: types.authorization.v1beta1.SubjectAccessReviewSpec

			/**
			 * Create a authorization.v1beta1.SubjectAccessReview object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.authorization.v1beta1.SubjectAccessReview
			) {
				const props: any = {}
				props.apiVersion = 'authorization.k8s.io/v1beta1'
				props.kind = 'SubjectAccessReview'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:SubjectAccessReview`)
			}
		}
	}
}

export namespace autoscaling {
	export namespace v1 {
		/**
		 * configuration of a horizontal pod autoscaler.
		 */
		export class HorizontalPodAutoscaler extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'autoscaling/v1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'HorizontalPodAutoscaler'

			/**
			 * Standard object metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * behaviour of autoscaler. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
			 */
			spec!: types.autoscaling.v1.HorizontalPodAutoscalerSpec

			/**
			 * Create a autoscaling.v1.HorizontalPodAutoscaler object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.autoscaling.v1.HorizontalPodAutoscaler
			) {
				const props: any = {}
				props.apiVersion = 'autoscaling/v1'
				props.kind = 'HorizontalPodAutoscaler'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:HorizontalPodAutoscaler`)
			}
		}
		/**
		 * list of horizontal pod autoscaler objects.
		 */
		export class HorizontalPodAutoscalerList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'autoscaling/v1'

			/**
			 * list of horizontal pod autoscaler objects.
			 */
			items!: types.autoscaling.v1.HorizontalPodAutoscaler[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'HorizontalPodAutoscalerList'

			/**
			 * Standard list metadata.
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a autoscaling.v1.HorizontalPodAutoscalerList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.autoscaling.v1.HorizontalPodAutoscalerList
			) {
				const props: any = {}
				props.apiVersion = 'autoscaling/v1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'HorizontalPodAutoscalerList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:HorizontalPodAutoscalerList`)
			}
		}
	}

	export namespace v2beta1 {
		/**
		 * HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which
		 * automatically manages the replica count of any resource implementing the scale subresource
		 * based on the metrics specified.
		 */
		export class HorizontalPodAutoscaler extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'autoscaling/v2beta1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'HorizontalPodAutoscaler'

			/**
			 * metadata is the standard object metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * spec is the specification for the behaviour of the autoscaler. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
			 */
			spec!: types.autoscaling.v2beta1.HorizontalPodAutoscalerSpec

			/**
			 * Create a autoscaling.v2beta1.HorizontalPodAutoscaler object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.autoscaling.v2beta1.HorizontalPodAutoscaler
			) {
				const props: any = {}
				props.apiVersion = 'autoscaling/v2beta1'
				props.kind = 'HorizontalPodAutoscaler'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:HorizontalPodAutoscaler`)
			}
		}
		/**
		 * HorizontalPodAutoscaler is a list of horizontal pod autoscaler objects.
		 */
		export class HorizontalPodAutoscalerList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'autoscaling/v2beta1'

			/**
			 * items is the list of horizontal pod autoscaler objects.
			 */
			items!: types.autoscaling.v2beta1.HorizontalPodAutoscaler[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'HorizontalPodAutoscalerList'

			/**
			 * metadata is the standard list metadata.
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a autoscaling.v2beta1.HorizontalPodAutoscalerList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.autoscaling.v2beta1.HorizontalPodAutoscalerList
			) {
				const props: any = {}
				props.apiVersion = 'autoscaling/v2beta1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'HorizontalPodAutoscalerList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:HorizontalPodAutoscalerList`)
			}
		}
	}

	export namespace v2beta2 {
		/**
		 * HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which
		 * automatically manages the replica count of any resource implementing the scale subresource
		 * based on the metrics specified.
		 */
		export class HorizontalPodAutoscaler extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'autoscaling/v2beta2'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'HorizontalPodAutoscaler'

			/**
			 * metadata is the standard object metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * spec is the specification for the behaviour of the autoscaler. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
			 */
			spec!: types.autoscaling.v2beta2.HorizontalPodAutoscalerSpec

			/**
			 * Create a autoscaling.v2beta2.HorizontalPodAutoscaler object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.autoscaling.v2beta2.HorizontalPodAutoscaler
			) {
				const props: any = {}
				props.apiVersion = 'autoscaling/v2beta2'
				props.kind = 'HorizontalPodAutoscaler'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:HorizontalPodAutoscaler`)
			}
		}
		/**
		 * HorizontalPodAutoscalerList is a list of horizontal pod autoscaler objects.
		 */
		export class HorizontalPodAutoscalerList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'autoscaling/v2beta2'

			/**
			 * items is the list of horizontal pod autoscaler objects.
			 */
			items!: types.autoscaling.v2beta2.HorizontalPodAutoscaler[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'HorizontalPodAutoscalerList'

			/**
			 * metadata is the standard list metadata.
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a autoscaling.v2beta2.HorizontalPodAutoscalerList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.autoscaling.v2beta2.HorizontalPodAutoscalerList
			) {
				const props: any = {}
				props.apiVersion = 'autoscaling/v2beta2'
				props.items = (desc && desc.items) || undefined
				props.kind = 'HorizontalPodAutoscalerList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:HorizontalPodAutoscalerList`)
			}
		}
	}
}

export namespace batch {
	export namespace v1 {
		/**
		 * Job represents the configuration of a single job.
		 */
		export class Job extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'batch/v1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'Job'

			/**
			 * Standard object's metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Specification of the desired behavior of a job. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
			 */
			spec!: types.batch.v1.JobSpec

			/**
			 * Create a batch.v1.Job object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.batch.v1.Job) {
				const props: any = {}
				props.apiVersion = 'batch/v1'
				props.kind = 'Job'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:Job`)
			}
		}
		/**
		 * JobList is a collection of jobs.
		 */
		export class JobList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'batch/v1'

			/**
			 * items is the list of Jobs.
			 */
			items!: types.batch.v1.Job[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'JobList'

			/**
			 * Standard list metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a batch.v1.JobList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.batch.v1.JobList) {
				const props: any = {}
				props.apiVersion = 'batch/v1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'JobList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:JobList`)
			}
		}
	}

	export namespace v1beta1 {
		/**
		 * CronJob represents the configuration of a single cron job.
		 */
		export class CronJob extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'batch/v1beta1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'CronJob'

			/**
			 * Standard object's metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Specification of the desired behavior of a cron job, including the schedule. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
			 */
			spec!: types.batch.v1beta1.CronJobSpec

			/**
			 * Create a batch.v1beta1.CronJob object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.batch.v1beta1.CronJob) {
				const props: any = {}
				props.apiVersion = 'batch/v1beta1'
				props.kind = 'CronJob'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:CronJob`)
			}
		}
		/**
		 * CronJobList is a collection of cron jobs.
		 */
		export class CronJobList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'batch/v1beta1'

			/**
			 * items is the list of CronJobs.
			 */
			items!: types.batch.v1beta1.CronJob[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'CronJobList'

			/**
			 * Standard list metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a batch.v1beta1.CronJobList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.batch.v1beta1.CronJobList) {
				const props: any = {}
				props.apiVersion = 'batch/v1beta1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'CronJobList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:CronJobList`)
			}
		}
	}

	export namespace v2alpha1 {
		/**
		 * CronJob represents the configuration of a single cron job.
		 */
		export class CronJob extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'batch/v2alpha1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'CronJob'

			/**
			 * Standard object's metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Specification of the desired behavior of a cron job, including the schedule. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
			 */
			spec!: types.batch.v2alpha1.CronJobSpec

			/**
			 * Create a batch.v2alpha1.CronJob object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.batch.v2alpha1.CronJob) {
				const props: any = {}
				props.apiVersion = 'batch/v2alpha1'
				props.kind = 'CronJob'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:CronJob`)
			}
		}
		/**
		 * CronJobList is a collection of cron jobs.
		 */
		export class CronJobList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'batch/v2alpha1'

			/**
			 * items is the list of CronJobs.
			 */
			items!: types.batch.v2alpha1.CronJob[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'CronJobList'

			/**
			 * Standard list metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a batch.v2alpha1.CronJobList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.batch.v2alpha1.CronJobList) {
				const props: any = {}
				props.apiVersion = 'batch/v2alpha1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'CronJobList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:CronJobList`)
			}
		}
	}
}

export namespace certificates {
	export namespace v1beta1 {
		/**
		 * Describes a certificate signing request
		 */
		export class CertificateSigningRequest extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'certificates.k8s.io/v1beta1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'CertificateSigningRequest'

			metadata!: types.meta.v1.ObjectMeta

			/**
			 * The certificate request itself and any additional information.
			 */
			spec!: types.certificates.v1beta1.CertificateSigningRequestSpec

			/**
			 * Create a certificates.v1beta1.CertificateSigningRequest object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.certificates.v1beta1.CertificateSigningRequest
			) {
				const props: any = {}
				props.apiVersion = 'certificates.k8s.io/v1beta1'
				props.kind = 'CertificateSigningRequest'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:CertificateSigningRequest`)
			}
		}
		/**
		 *
		 */
		export class CertificateSigningRequestList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'certificates.k8s.io/v1beta1'

			items!: types.certificates.v1beta1.CertificateSigningRequest[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'CertificateSigningRequestList'

			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a certificates.v1beta1.CertificateSigningRequestList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.certificates.v1beta1.CertificateSigningRequestList
			) {
				const props: any = {}
				props.apiVersion = 'certificates.k8s.io/v1beta1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'CertificateSigningRequestList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:CertificateSigningRequestList`)
			}
		}
	}
}

export namespace coordination {
	export namespace v1 {
		/**
		 * Lease defines a lease concept.
		 */
		export class Lease extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'coordination.k8s.io/v1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'Lease'

			/**
			 * More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Specification of the Lease. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
			 */
			spec!: types.coordination.v1.LeaseSpec

			/**
			 * Create a coordination.v1.Lease object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.coordination.v1.Lease) {
				const props: any = {}
				props.apiVersion = 'coordination.k8s.io/v1'
				props.kind = 'Lease'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:Lease`)
			}
		}
		/**
		 * LeaseList is a list of Lease objects.
		 */
		export class LeaseList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'coordination.k8s.io/v1'

			/**
			 * Items is a list of schema objects.
			 */
			items!: types.coordination.v1.Lease[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'LeaseList'

			/**
			 * Standard list metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a coordination.v1.LeaseList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.coordination.v1.LeaseList) {
				const props: any = {}
				props.apiVersion = 'coordination.k8s.io/v1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'LeaseList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:LeaseList`)
			}
		}
	}

	export namespace v1beta1 {
		/**
		 * Lease defines a lease concept.
		 */
		export class Lease extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'coordination.k8s.io/v1beta1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'Lease'

			/**
			 * More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Specification of the Lease. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
			 */
			spec!: types.coordination.v1beta1.LeaseSpec

			/**
			 * Create a coordination.v1beta1.Lease object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.coordination.v1beta1.Lease) {
				const props: any = {}
				props.apiVersion = 'coordination.k8s.io/v1beta1'
				props.kind = 'Lease'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:Lease`)
			}
		}
		/**
		 * LeaseList is a list of Lease objects.
		 */
		export class LeaseList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'coordination.k8s.io/v1beta1'

			/**
			 * Items is a list of schema objects.
			 */
			items!: types.coordination.v1beta1.Lease[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'LeaseList'

			/**
			 * Standard list metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a coordination.v1beta1.LeaseList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.coordination.v1beta1.LeaseList) {
				const props: any = {}
				props.apiVersion = 'coordination.k8s.io/v1beta1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'LeaseList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:LeaseList`)
			}
		}
	}
}

export namespace core {
	export namespace v1 {
		/**
		 * Binding ties one object to another; for example, a pod is bound to a node by a scheduler.
		 *
		 * @deprecated core/v1/Binding is deprecated by the bindings subresource of pods and not
		 * supported by Kubernetes v1.7+ clusters.
		 */
		export class Binding extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'v1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'Binding'

			/**
			 * Standard object's metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * The target object that you want to bind to the standard object.
			 */
			target!: types.core.v1.ObjectReference

			/**
			 * Create a core.v1.Binding object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.core.v1.Binding) {
				const props: any = {}
				props.apiVersion = 'v1'
				props.kind = 'Binding'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.target = (desc && desc.target) || undefined

				super(name, props)
				this.setType(`k8s:Binding`)
			}
		}
		/**
		 * ConfigMap holds configuration data for pods to consume.
		 */
		export class ConfigMap extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'v1'

			/**
			 * BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-',
			 * '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys
			 * stored in BinaryData must not overlap with the ones in the Data field, this is enforced
			 * during validation process. Using this field will require 1.10+ apiserver and kubelet.
			 */
			binaryData?: Dictionary<string, any>

			/**
			 * Data contains the configuration data. Each key must consist of alphanumeric characters,
			 * '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The
			 * keys stored in Data must not overlap with the keys in the BinaryData field, this is
			 * enforced during validation process.
			 */
			data?: { [key: string]: string }

			/**
			 * Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated
			 * (only object metadata can be modified). If not set to true, the field can be modified at
			 * any time. Defaulted to nil. This is an alpha field enabled by ImmutableEphemeralVolumes
			 * feature gate.
			 */
			immutable?: boolean

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'ConfigMap'

			/**
			 * Standard object's metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Create a core.v1.ConfigMap object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.core.v1.ConfigMap) {
				const props: any = {}
				props.apiVersion = 'v1'
				props.binaryData = (desc && desc.binaryData) || undefined
				props.data = (desc && desc.data) || undefined
				props.immutable = (desc && desc.immutable) || undefined
				props.kind = 'ConfigMap'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})

				super(name, props)
				this.setType(`k8s:ConfigMap`)
			}
		}
		/**
		 * ConfigMapList is a resource containing a list of ConfigMap objects.
		 */
		export class ConfigMapList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'v1'

			/**
			 * Items is the list of ConfigMaps.
			 */
			items!: types.core.v1.ConfigMap[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'ConfigMapList'

			/**
			 * More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a core.v1.ConfigMapList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.core.v1.ConfigMapList) {
				const props: any = {}
				props.apiVersion = 'v1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'ConfigMapList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:ConfigMapList`)
			}
		}
		/**
		 * Endpoints is a collection of endpoints that implement the actual service. Example:
		 *   Name: "mysvc",
		 *   Subsets: [
		 *     {
		 *       Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
		 *       Ports: [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
		 *     },
		 *     {
		 *       Addresses: [{"ip": "10.10.3.3"}],
		 *       Ports: [{"name": "a", "port": 93}, {"name": "b", "port": 76}]
		 *     },
		 *  ]
		 */
		export class Endpoints extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'v1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'Endpoints'

			/**
			 * Standard object's metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * The set of all endpoints is the union of all subsets. Addresses are placed into subsets
			 * according to the IPs they share. A single address with multiple ports, some of which are
			 * ready and some of which are not (because they come from different containers) will result
			 * in the address being displayed in different subsets for the different ports. No address
			 * will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses
			 * and ports that comprise a service.
			 */
			subsets?: types.core.v1.EndpointSubset[]

			/**
			 * Create a core.v1.Endpoints object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.core.v1.Endpoints) {
				const props: any = {}
				props.apiVersion = 'v1'
				props.kind = 'Endpoints'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.subsets = (desc && desc.subsets) || undefined

				super(name, props)
				this.setType(`k8s:Endpoints`)
			}
		}
		/**
		 * EndpointsList is a list of endpoints.
		 */
		export class EndpointsList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'v1'

			/**
			 * List of endpoints.
			 */
			items!: types.core.v1.Endpoints[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'EndpointsList'

			/**
			 * Standard list metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a core.v1.EndpointsList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.core.v1.EndpointsList) {
				const props: any = {}
				props.apiVersion = 'v1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'EndpointsList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:EndpointsList`)
			}
		}
		/**
		 * Event is a report of an event somewhere in the cluster.
		 */
		export class Event extends kite.Resource {
			/**
			 * What action was taken/failed regarding to the Regarding object.
			 */
			action?: string

			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'v1'

			/**
			 * The number of times this event has occurred.
			 */
			count?: number

			/**
			 * Time when this Event was first observed.
			 */
			eventTime?: string

			/**
			 * The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
			 */
			firstTimestamp?: string

			/**
			 * The object that this event is about.
			 */
			involvedObject!: types.core.v1.ObjectReference

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'Event'

			/**
			 * The time at which the most recent occurrence of this event was recorded.
			 */
			lastTimestamp?: string

			/**
			 * A human-readable description of the status of this operation.
			 */
			message?: string

			/**
			 * Standard object's metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * This should be a short, machine understandable string that gives the reason for the
			 * transition into the object's current status.
			 */
			reason?: string

			/**
			 * Optional secondary object for more complex actions.
			 */
			related?: types.core.v1.ObjectReference

			/**
			 * Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
			 */
			reportingComponent?: string

			/**
			 * ID of the controller instance, e.g. `kubelet-xyzf`.
			 */
			reportingInstance?: string

			/**
			 * Data about the Event series this event represents or nil if it's a singleton Event.
			 */
			series?: types.core.v1.EventSeries

			/**
			 * The component reporting this event. Should be a short machine understandable string.
			 */
			source?: types.core.v1.EventSource

			/**
			 * Type of this event (Normal, Warning), new types could be added in the future
			 */
			type?: string

			/**
			 * Create a core.v1.Event object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.core.v1.Event) {
				const props: any = {}
				props.action = (desc && desc.action) || undefined
				props.apiVersion = 'v1'
				props.count = (desc && desc.count) || undefined
				props.eventTime = (desc && desc.eventTime) || undefined
				props.firstTimestamp = (desc && desc.firstTimestamp) || undefined
				props.involvedObject = (desc && desc.involvedObject) || undefined
				props.kind = 'Event'
				props.lastTimestamp = (desc && desc.lastTimestamp) || undefined
				props.message = (desc && desc.message) || undefined
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.reason = (desc && desc.reason) || undefined
				props.related = (desc && desc.related) || undefined
				props.reportingComponent =
					(desc && desc.reportingComponent) || undefined
				props.reportingInstance = (desc && desc.reportingInstance) || undefined
				props.series = (desc && desc.series) || undefined
				props.source = (desc && desc.source) || undefined
				props.type = (desc && desc.type) || undefined

				super(name, props)
				this.setType(`k8s:Event`)
			}
		}
		/**
		 * EventList is a list of events.
		 */
		export class EventList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'v1'

			/**
			 * List of events
			 */
			items!: types.core.v1.Event[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'EventList'

			/**
			 * Standard list metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a core.v1.EventList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.core.v1.EventList) {
				const props: any = {}
				props.apiVersion = 'v1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'EventList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:EventList`)
			}
		}
		/**
		 * LimitRange sets resource usage limits for each kind of resource in a Namespace.
		 */
		export class LimitRange extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'v1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'LimitRange'

			/**
			 * Standard object's metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Spec defines the limits enforced. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
			 */
			spec!: types.core.v1.LimitRangeSpec

			/**
			 * Create a core.v1.LimitRange object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.core.v1.LimitRange) {
				const props: any = {}
				props.apiVersion = 'v1'
				props.kind = 'LimitRange'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:LimitRange`)
			}
		}
		/**
		 * LimitRangeList is a list of LimitRange items.
		 */
		export class LimitRangeList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'v1'

			/**
			 * Items is a list of LimitRange objects. More info:
			 * https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
			 */
			items!: types.core.v1.LimitRange[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'LimitRangeList'

			/**
			 * Standard list metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a core.v1.LimitRangeList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.core.v1.LimitRangeList) {
				const props: any = {}
				props.apiVersion = 'v1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'LimitRangeList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:LimitRangeList`)
			}
		}
		/**
		 * Namespace provides a scope for Names. Use of multiple namespaces is optional.
		 */
		export class Namespace extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'v1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'Namespace'

			/**
			 * Standard object's metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Spec defines the behavior of the Namespace. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
			 */
			spec!: types.core.v1.NamespaceSpec

			/**
			 * Create a core.v1.Namespace object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc?: types.core.v1.Namespace) {
				const props: any = {}
				props.apiVersion = 'v1'
				props.kind = 'Namespace'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:Namespace`)
			}
		}
		/**
		 * NamespaceList is a list of Namespaces.
		 */
		export class NamespaceList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'v1'

			/**
			 * Items is the list of Namespace objects in the list. More info:
			 * https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
			 */
			items!: types.core.v1.Namespace[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'NamespaceList'

			/**
			 * Standard list metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a core.v1.NamespaceList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.core.v1.NamespaceList) {
				const props: any = {}
				props.apiVersion = 'v1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'NamespaceList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:NamespaceList`)
			}
		}
		/**
		 * Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache
		 * (i.e. in etcd).
		 */
		export class Node extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'v1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'Node'

			/**
			 * Standard object's metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Spec defines the behavior of a node.
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
			 */
			spec!: types.core.v1.NodeSpec

			/**
			 * Create a core.v1.Node object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.core.v1.Node) {
				const props: any = {}
				props.apiVersion = 'v1'
				props.kind = 'Node'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:Node`)
			}
		}
		/**
		 * NodeList is the whole list of all Nodes which have been registered with master.
		 */
		export class NodeList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'v1'

			/**
			 * List of nodes
			 */
			items!: types.core.v1.Node[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'NodeList'

			/**
			 * Standard list metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a core.v1.NodeList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.core.v1.NodeList) {
				const props: any = {}
				props.apiVersion = 'v1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'NodeList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:NodeList`)
			}
		}
		/**
		 * PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous
		 * to a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
		 */
		export class PersistentVolume extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'v1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'PersistentVolume'

			/**
			 * Standard object's metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Spec defines a specification of a persistent volume owned by the cluster. Provisioned by an
			 * administrator. More info:
			 * https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
			 */
			spec!: types.core.v1.PersistentVolumeSpec

			/**
			 * Create a core.v1.PersistentVolume object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.core.v1.PersistentVolume) {
				const props: any = {}
				props.apiVersion = 'v1'
				props.kind = 'PersistentVolume'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:PersistentVolume`)
			}
		}
		/**
		 * PersistentVolumeClaim is a user's request for and claim to a persistent volume
		 */
		export class PersistentVolumeClaim extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'v1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'PersistentVolumeClaim'

			/**
			 * Standard object's metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Spec defines the desired characteristics of a volume requested by a pod author. More info:
			 * https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
			 */
			spec!: types.core.v1.PersistentVolumeClaimSpec

			/**
			 * Create a core.v1.PersistentVolumeClaim object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.core.v1.PersistentVolumeClaim) {
				const props: any = {}
				props.apiVersion = 'v1'
				props.kind = 'PersistentVolumeClaim'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:PersistentVolumeClaim`)
			}
		}
		/**
		 * PersistentVolumeClaimList is a list of PersistentVolumeClaim items.
		 */
		export class PersistentVolumeClaimList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'v1'

			/**
			 * A list of persistent volume claims. More info:
			 * https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
			 */
			items!: types.core.v1.PersistentVolumeClaim[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'PersistentVolumeClaimList'

			/**
			 * Standard list metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a core.v1.PersistentVolumeClaimList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.core.v1.PersistentVolumeClaimList) {
				const props: any = {}
				props.apiVersion = 'v1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'PersistentVolumeClaimList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:PersistentVolumeClaimList`)
			}
		}
		/**
		 * PersistentVolumeList is a list of PersistentVolume items.
		 */
		export class PersistentVolumeList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'v1'

			/**
			 * List of persistent volumes. More info:
			 * https://kubernetes.io/docs/concepts/storage/persistent-volumes
			 */
			items!: types.core.v1.PersistentVolume[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'PersistentVolumeList'

			/**
			 * Standard list metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a core.v1.PersistentVolumeList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.core.v1.PersistentVolumeList) {
				const props: any = {}
				props.apiVersion = 'v1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'PersistentVolumeList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:PersistentVolumeList`)
			}
		}
		/**
		 * Pod is a collection of containers that can run on a host. This resource is created by clients
		 * and scheduled onto hosts.
		 */
		export class Pod extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'v1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'Pod'

			/**
			 * Standard object's metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Specification of the desired behavior of the pod. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
			 */
			spec!: types.core.v1.PodSpec

			/**
			 * Create a core.v1.Pod object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.core.v1.Pod) {
				const props: any = {}
				props.apiVersion = 'v1'
				props.kind = 'Pod'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:Pod`)
			}
		}
		/**
		 * PodList is a list of Pods.
		 */
		export class PodList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'v1'

			/**
			 * List of pods. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
			 */
			items!: types.core.v1.Pod[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'PodList'

			/**
			 * Standard list metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a core.v1.PodList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.core.v1.PodList) {
				const props: any = {}
				props.apiVersion = 'v1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'PodList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:PodList`)
			}
		}
		/**
		 * PodTemplate describes a template for creating copies of a predefined pod.
		 */
		export class PodTemplate extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'v1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'PodTemplate'

			/**
			 * Standard object's metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Template defines the pods that will be created from this pod template.
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
			 */
			template?: types.core.v1.PodTemplateSpec

			/**
			 * Create a core.v1.PodTemplate object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.core.v1.PodTemplate) {
				const props: any = {}
				props.apiVersion = 'v1'
				props.kind = 'PodTemplate'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.template = (desc && desc.template) || undefined

				super(name, props)
				this.setType(`k8s:PodTemplate`)
			}
		}
		/**
		 * PodTemplateList is a list of PodTemplates.
		 */
		export class PodTemplateList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'v1'

			/**
			 * List of pod templates
			 */
			items!: types.core.v1.PodTemplate[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'PodTemplateList'

			/**
			 * Standard list metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a core.v1.PodTemplateList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.core.v1.PodTemplateList) {
				const props: any = {}
				props.apiVersion = 'v1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'PodTemplateList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:PodTemplateList`)
			}
		}
		/**
		 * ReplicationController represents the configuration of a replication controller.
		 */
		export class ReplicationController extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'v1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'ReplicationController'

			/**
			 * If the Labels of a ReplicationController are empty, they are defaulted to be the same as
			 * the Pod(s) that the replication controller manages. Standard object's metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Spec defines the specification of the desired behavior of the replication controller. More
			 * info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
			 */
			spec!: types.core.v1.ReplicationControllerSpec

			/**
			 * Create a core.v1.ReplicationController object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.core.v1.ReplicationController) {
				const props: any = {}
				props.apiVersion = 'v1'
				props.kind = 'ReplicationController'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:ReplicationController`)
			}
		}
		/**
		 * ReplicationControllerList is a collection of replication controllers.
		 */
		export class ReplicationControllerList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'v1'

			/**
			 * List of replication controllers. More info:
			 * https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller
			 */
			items!: types.core.v1.ReplicationController[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'ReplicationControllerList'

			/**
			 * Standard list metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a core.v1.ReplicationControllerList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.core.v1.ReplicationControllerList) {
				const props: any = {}
				props.apiVersion = 'v1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'ReplicationControllerList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:ReplicationControllerList`)
			}
		}
		/**
		 * ResourceQuota sets aggregate quota restrictions enforced per namespace
		 */
		export class ResourceQuota extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'v1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'ResourceQuota'

			/**
			 * Standard object's metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Spec defines the desired quota.
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
			 */
			spec!: types.core.v1.ResourceQuotaSpec

			/**
			 * Create a core.v1.ResourceQuota object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.core.v1.ResourceQuota) {
				const props: any = {}
				props.apiVersion = 'v1'
				props.kind = 'ResourceQuota'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:ResourceQuota`)
			}
		}
		/**
		 * ResourceQuotaList is a list of ResourceQuota items.
		 */
		export class ResourceQuotaList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'v1'

			/**
			 * Items is a list of ResourceQuota objects. More info:
			 * https://kubernetes.io/docs/concepts/policy/resource-quotas/
			 */
			items!: types.core.v1.ResourceQuota[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'ResourceQuotaList'

			/**
			 * Standard list metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a core.v1.ResourceQuotaList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.core.v1.ResourceQuotaList) {
				const props: any = {}
				props.apiVersion = 'v1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'ResourceQuotaList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:ResourceQuotaList`)
			}
		}
		/**
		 * Secret holds secret data of a certain type. The total bytes of the values in the Data field
		 * must be less than MaxSecretSize bytes.
		 */
		export class Secret extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'v1'

			/**
			 * Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_'
			 * or '.'. The serialized form of the secret data is a base64 encoded string, representing the
			 * arbitrary (possibly non-string) data value here. Described in
			 * https://tools.ietf.org/html/rfc4648#section-4
			 */
			data?: Dictionary<string, string>

			/**
			 * Immutable, if set to true, ensures that data stored in the Secret cannot be updated (only
			 * object metadata can be modified). If not set to true, the field can be modified at any
			 * time. Defaulted to nil. This is an alpha field enabled by ImmutableEphemeralVolumes feature
			 * gate.
			 */
			immutable?: boolean

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'Secret'

			/**
			 * Standard object's metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * stringData allows specifying non-binary secret data in string form. It is provided as a
			 * write-only convenience method. All keys and values are merged into the data field on write,
			 * overwriting any existing values. It is never output when reading from the API.
			 */
			stringData?: { [key: string]: string }

			/**
			 * Used to facilitate programmatic handling of secret data.
			 */
			type?: string

			/**
			 * Create a core.v1.Secret object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.core.v1.Secret) {
				const props: any = {}
				props.apiVersion = 'v1'
				props.data = (desc && desc.data) || undefined
				props.immutable = (desc && desc.immutable) || undefined
				props.kind = 'Secret'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.stringData = (desc && desc.stringData) || undefined
				props.type = (desc && desc.type) || undefined

				super(name, props)
				this.setType(`k8s:Secret`)
			}
		}
		/**
		 * SecretList is a list of Secret.
		 */
		export class SecretList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'v1'

			/**
			 * Items is a list of secret objects. More info:
			 * https://kubernetes.io/docs/concepts/configuration/secret
			 */
			items!: types.core.v1.Secret[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'SecretList'

			/**
			 * Standard list metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a core.v1.SecretList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.core.v1.SecretList) {
				const props: any = {}
				props.apiVersion = 'v1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'SecretList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:SecretList`)
			}
		}
		/**
		 * Service is a named abstraction of software service (for example, mysql) consisting of local
		 * port (for example 3306) that the proxy listens on, and the selector that determines which
		 * pods will answer requests sent through the proxy.
		 */
		export class Service extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'v1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'Service'

			/**
			 * Standard object's metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Spec defines the behavior of a service.
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
			 */
			spec!: types.core.v1.ServiceSpec

			/**
			 * Create a core.v1.Service object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.core.v1.Service) {
				const props: any = {}
				props.apiVersion = 'v1'
				props.kind = 'Service'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:Service`)
			}
		}
		/**
		 * ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral
		 * systems, for an identity * a principal that can be authenticated and authorized * a set of
		 * secrets
		 */
		export class ServiceAccount extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'v1'

			/**
			 * AutomountServiceAccountToken indicates whether pods running as this service account should
			 * have an API token automatically mounted. Can be overridden at the pod level.
			 */
			automountServiceAccountToken?: boolean

			/**
			 * ImagePullSecrets is a list of references to secrets in the same namespace to use for
			 * pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are
			 * distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are
			 * only accessed by the kubelet. More info:
			 * https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
			 */
			imagePullSecrets?: types.core.v1.LocalObjectReference[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'ServiceAccount'

			/**
			 * Standard object's metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Secrets is the list of secrets allowed to be used by pods running using this
			 * ServiceAccount. More info: https://kubernetes.io/docs/concepts/configuration/secret
			 */
			secrets?: types.core.v1.ObjectReference[]

			/**
			 * Create a core.v1.ServiceAccount object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.core.v1.ServiceAccount) {
				const props: any = {}
				props.apiVersion = 'v1'
				props.automountServiceAccountToken =
					(desc && desc.automountServiceAccountToken) || undefined
				props.imagePullSecrets = (desc && desc.imagePullSecrets) || undefined
				props.kind = 'ServiceAccount'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.secrets = (desc && desc.secrets) || undefined

				super(name, props)
				this.setType(`k8s:ServiceAccount`)
			}
		}
		/**
		 * ServiceAccountList is a list of ServiceAccount objects
		 */
		export class ServiceAccountList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'v1'

			/**
			 * List of ServiceAccounts. More info:
			 * https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
			 */
			items!: types.core.v1.ServiceAccount[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'ServiceAccountList'

			/**
			 * Standard list metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a core.v1.ServiceAccountList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.core.v1.ServiceAccountList) {
				const props: any = {}
				props.apiVersion = 'v1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'ServiceAccountList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:ServiceAccountList`)
			}
		}
		/**
		 * ServiceList holds a list of services.
		 */
		export class ServiceList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'v1'

			/**
			 * List of services
			 */
			items!: types.core.v1.Service[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'ServiceList'

			/**
			 * Standard list metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a core.v1.ServiceList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.core.v1.ServiceList) {
				const props: any = {}
				props.apiVersion = 'v1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'ServiceList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:ServiceList`)
			}
		}
	}
}

export namespace discovery {
	export namespace v1beta1 {
		/**
		 * EndpointSlice represents a subset of the endpoints that implement a service. For a given
		 * service there may be multiple EndpointSlice objects, selected by labels, which must be joined
		 * to produce the full set of endpoints.
		 */
		export class EndpointSlice extends kite.Resource {
			/**
			 * addressType specifies the type of address carried by this EndpointSlice. All addresses in
			 * this slice must be the same type. This field is immutable after creation. The following
			 * address types are currently supported: * IPv4: Represents an IPv4 Address. * IPv6:
			 * Represents an IPv6 Address. * FQDN: Represents a Fully Qualified Domain Name.
			 */
			addressType!: string

			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'discovery.k8s.io/v1beta1'

			/**
			 * endpoints is a list of unique endpoints in this slice. Each slice may include a maximum of
			 * 1000 endpoints.
			 */
			endpoints!: types.discovery.v1beta1.Endpoint[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'EndpointSlice'

			/**
			 * Standard object's metadata.
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * ports specifies the list of network ports exposed by each endpoint in this slice. Each port
			 * must have a unique name. When ports is empty, it indicates that there are no defined ports.
			 * When a port is defined with a nil port value, it indicates "all ports". Each slice may
			 * include a maximum of 100 ports.
			 */
			ports?: types.discovery.v1beta1.EndpointPort[]

			/**
			 * Create a discovery.v1beta1.EndpointSlice object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.discovery.v1beta1.EndpointSlice) {
				const props: any = {}
				props.addressType = (desc && desc.addressType) || undefined
				props.apiVersion = 'discovery.k8s.io/v1beta1'
				props.endpoints = (desc && desc.endpoints) || undefined
				props.kind = 'EndpointSlice'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.ports = (desc && desc.ports) || undefined

				super(name, props)
				this.setType(`k8s:EndpointSlice`)
			}
		}
		/**
		 * EndpointSliceList represents a list of endpoint slices
		 */
		export class EndpointSliceList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'discovery.k8s.io/v1beta1'

			/**
			 * List of endpoint slices
			 */
			items!: types.discovery.v1beta1.EndpointSlice[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'EndpointSliceList'

			/**
			 * Standard list metadata.
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a discovery.v1beta1.EndpointSliceList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.discovery.v1beta1.EndpointSliceList
			) {
				const props: any = {}
				props.apiVersion = 'discovery.k8s.io/v1beta1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'EndpointSliceList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:EndpointSliceList`)
			}
		}
	}
}

export namespace events {
	export namespace v1beta1 {
		/**
		 * Event is a report of an event somewhere in the cluster. It generally denotes some state
		 * change in the system.
		 */
		export class Event extends kite.Resource {
			/**
			 * What action was taken/failed regarding to the regarding object.
			 */
			action?: string

			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'events.k8s.io/v1beta1'

			/**
			 * Deprecated field assuring backward compatibility with core.v1 Event type
			 */
			deprecatedCount?: number

			/**
			 * Deprecated field assuring backward compatibility with core.v1 Event type
			 */
			deprecatedFirstTimestamp?: string

			/**
			 * Deprecated field assuring backward compatibility with core.v1 Event type
			 */
			deprecatedLastTimestamp?: string

			/**
			 * Deprecated field assuring backward compatibility with core.v1 Event type
			 */
			deprecatedSource?: types.core.v1.EventSource

			/**
			 * Required. Time when this Event was first observed.
			 */
			eventTime!: string

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'Event'

			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Optional. A human-readable description of the status of this operation. Maximal length of
			 * the note is 1kB, but libraries should be prepared to handle values up to 64kB.
			 */
			note?: string

			/**
			 * Why the action was taken.
			 */
			reason?: string

			/**
			 * The object this Event is about. In most cases it's an Object reporting controller
			 * implements. E.g. ReplicaSetController implements ReplicaSets and this event is emitted
			 * because it acts on some changes in a ReplicaSet object.
			 */
			regarding?: types.core.v1.ObjectReference

			/**
			 * Optional secondary object for more complex actions. E.g. when regarding object triggers a
			 * creation or deletion of related object.
			 */
			related?: types.core.v1.ObjectReference

			/**
			 * Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
			 */
			reportingController?: string

			/**
			 * ID of the controller instance, e.g. `kubelet-xyzf`.
			 */
			reportingInstance?: string

			/**
			 * Data about the Event series this event represents or nil if it's a singleton Event.
			 */
			series?: types.events.v1beta1.EventSeries

			/**
			 * Type of this event (Normal, Warning), new types could be added in the future.
			 */
			type?: string

			/**
			 * Create a events.v1beta1.Event object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.events.v1beta1.Event) {
				const props: any = {}
				props.action = (desc && desc.action) || undefined
				props.apiVersion = 'events.k8s.io/v1beta1'
				props.deprecatedCount = (desc && desc.deprecatedCount) || undefined
				props.deprecatedFirstTimestamp =
					(desc && desc.deprecatedFirstTimestamp) || undefined
				props.deprecatedLastTimestamp =
					(desc && desc.deprecatedLastTimestamp) || undefined
				props.deprecatedSource = (desc && desc.deprecatedSource) || undefined
				props.eventTime = (desc && desc.eventTime) || undefined
				props.kind = 'Event'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.note = (desc && desc.note) || undefined
				props.reason = (desc && desc.reason) || undefined
				props.regarding = (desc && desc.regarding) || undefined
				props.related = (desc && desc.related) || undefined
				props.reportingController =
					(desc && desc.reportingController) || undefined
				props.reportingInstance = (desc && desc.reportingInstance) || undefined
				props.series = (desc && desc.series) || undefined
				props.type = (desc && desc.type) || undefined

				super(name, props)
				this.setType(`k8s:Event`)
			}
		}
		/**
		 * EventList is a list of Event objects.
		 */
		export class EventList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'events.k8s.io/v1beta1'

			/**
			 * Items is a list of schema objects.
			 */
			items!: types.events.v1beta1.Event[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'EventList'

			/**
			 * Standard list metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a events.v1beta1.EventList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.events.v1beta1.EventList) {
				const props: any = {}
				props.apiVersion = 'events.k8s.io/v1beta1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'EventList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:EventList`)
			}
		}
	}
}

export namespace extensions {
	export namespace v1beta1 {
		/**
		 * Ingress is a collection of rules that allow inbound connections to reach the endpoints
		 * defined by a backend. An Ingress can be configured to give services externally-reachable
		 * urls, load balance traffic, terminate SSL, offer name based virtual hosting etc.
		 *
		 * @deprecated extensions/v1beta1/Ingress is deprecated by networking/v1beta1/Ingress and not
		 * supported by Kubernetes v1.20+ clusters.
		 */
		export class Ingress extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'extensions/v1beta1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'Ingress'

			/**
			 * Standard object's metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Spec is the desired state of the Ingress. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
			 */
			spec!: types.extensions.v1beta1.IngressSpec

			/**
			 * Create a extensions.v1beta1.Ingress object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.extensions.v1beta1.Ingress) {
				const props: any = {}
				props.apiVersion = 'extensions/v1beta1'
				props.kind = 'Ingress'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:Ingress`)
			}
		}
		/**
		 * IngressList is a collection of Ingress.
		 */
		export class IngressList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'extensions/v1beta1'

			/**
			 * Items is the list of Ingress.
			 */
			items!: types.extensions.v1beta1.Ingress[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'IngressList'

			/**
			 * Standard object's metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a extensions.v1beta1.IngressList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.extensions.v1beta1.IngressList) {
				const props: any = {}
				props.apiVersion = 'extensions/v1beta1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'IngressList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:IngressList`)
			}
		}
	}
}

export namespace flowcontrol {
	export namespace v1alpha1 {
		/**
		 * FlowSchema defines the schema of a group of flows. Note that a flow is made up of a set of
		 * inbound API requests with similar attributes and is identified by a pair of strings: the name
		 * of the FlowSchema and a "flow distinguisher".
		 */
		export class FlowSchema extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'flowcontrol.apiserver.k8s.io/v1alpha1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'FlowSchema'

			/**
			 * `metadata` is the standard object's metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * `spec` is the specification of the desired behavior of a FlowSchema. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
			 */
			spec!: types.flowcontrol.v1alpha1.FlowSchemaSpec

			/**
			 * Create a flowcontrol.v1alpha1.FlowSchema object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.flowcontrol.v1alpha1.FlowSchema) {
				const props: any = {}
				props.apiVersion = 'flowcontrol.apiserver.k8s.io/v1alpha1'
				props.kind = 'FlowSchema'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:FlowSchema`)
			}
		}
		/**
		 * FlowSchemaList is a list of FlowSchema objects.
		 */
		export class FlowSchemaList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'flowcontrol.apiserver.k8s.io/v1alpha1'

			/**
			 * `items` is a list of FlowSchemas.
			 */
			items!: types.flowcontrol.v1alpha1.FlowSchema[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'FlowSchemaList'

			/**
			 * `metadata` is the standard list metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a flowcontrol.v1alpha1.FlowSchemaList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.flowcontrol.v1alpha1.FlowSchemaList
			) {
				const props: any = {}
				props.apiVersion = 'flowcontrol.apiserver.k8s.io/v1alpha1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'FlowSchemaList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:FlowSchemaList`)
			}
		}
		/**
		 * PriorityLevelConfiguration represents the configuration of a priority level.
		 */
		export class PriorityLevelConfiguration extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'flowcontrol.apiserver.k8s.io/v1alpha1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'PriorityLevelConfiguration'

			/**
			 * `metadata` is the standard object's metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * `spec` is the specification of the desired behavior of a "request-priority". More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
			 */
			spec!: types.flowcontrol.v1alpha1.PriorityLevelConfigurationSpec

			/**
			 * Create a flowcontrol.v1alpha1.PriorityLevelConfiguration object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.flowcontrol.v1alpha1.PriorityLevelConfiguration
			) {
				const props: any = {}
				props.apiVersion = 'flowcontrol.apiserver.k8s.io/v1alpha1'
				props.kind = 'PriorityLevelConfiguration'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:PriorityLevelConfiguration`)
			}
		}
		/**
		 * PriorityLevelConfigurationList is a list of PriorityLevelConfiguration objects.
		 */
		export class PriorityLevelConfigurationList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'flowcontrol.apiserver.k8s.io/v1alpha1'

			/**
			 * `items` is a list of request-priorities.
			 */
			items!: types.flowcontrol.v1alpha1.PriorityLevelConfiguration[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'PriorityLevelConfigurationList'

			/**
			 * `metadata` is the standard object's metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a flowcontrol.v1alpha1.PriorityLevelConfigurationList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.flowcontrol.v1alpha1.PriorityLevelConfigurationList
			) {
				const props: any = {}
				props.apiVersion = 'flowcontrol.apiserver.k8s.io/v1alpha1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'PriorityLevelConfigurationList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:PriorityLevelConfigurationList`)
			}
		}
	}
}

export namespace meta {
	export namespace v1 {
		/**
		 * Status is a return value for calls that don't return other objects.
		 */
		export class Status extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'v1'

			/**
			 * Suggested HTTP return code for this status, 0 if not set.
			 */
			code?: number

			/**
			 * Extended data associated with the reason.  Each reason may define its own extended details.
			 * This field is optional and the data returned is not guaranteed to conform to any schema
			 * except that defined by the reason type.
			 */
			details?: types.meta.v1.StatusDetails

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'Status'

			/**
			 * A human-readable description of the status of this operation.
			 */
			message?: string

			/**
			 * Standard list metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * A machine-readable description of why this operation is in the "Failure" status. If this
			 * value is empty there is no information available. A Reason clarifies an HTTP status code
			 * but does not override it.
			 */
			reason?: string

			/**
			 * Create a meta.v1.Status object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.meta.v1.Status) {
				const props: any = {}
				props.apiVersion = 'v1'
				props.code = (desc && desc.code) || undefined
				props.details = (desc && desc.details) || undefined
				props.kind = 'Status'
				props.message = (desc && desc.message) || undefined
				props.metadata = desc?.metadata || {}
				props.reason = (desc && desc.reason) || undefined

				super(name, props)
				this.setType(`k8s:Status`)
			}
		}
	}
}

export namespace networking {
	export namespace v1 {
		/**
		 * NetworkPolicy describes what network traffic is allowed for a set of Pods
		 */
		export class NetworkPolicy extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'networking.k8s.io/v1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'NetworkPolicy'

			/**
			 * Standard object's metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Specification of the desired behavior for this NetworkPolicy.
			 */
			spec!: types.networking.v1.NetworkPolicySpec

			/**
			 * Create a networking.v1.NetworkPolicy object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.networking.v1.NetworkPolicy) {
				const props: any = {}
				props.apiVersion = 'networking.k8s.io/v1'
				props.kind = 'NetworkPolicy'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:NetworkPolicy`)
			}
		}
		/**
		 * NetworkPolicyList is a list of NetworkPolicy objects.
		 */
		export class NetworkPolicyList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'networking.k8s.io/v1'

			/**
			 * Items is a list of schema objects.
			 */
			items!: types.networking.v1.NetworkPolicy[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'NetworkPolicyList'

			/**
			 * Standard list metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a networking.v1.NetworkPolicyList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.networking.v1.NetworkPolicyList) {
				const props: any = {}
				props.apiVersion = 'networking.k8s.io/v1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'NetworkPolicyList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:NetworkPolicyList`)
			}
		}
	}

	export namespace v1beta1 {
		/**
		 * Ingress is a collection of rules that allow inbound connections to reach the endpoints
		 * defined by a backend. An Ingress can be configured to give services externally-reachable
		 * urls, load balance traffic, terminate SSL, offer name based virtual hosting etc.
		 */
		export class Ingress extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'networking.k8s.io/v1beta1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'Ingress'

			/**
			 * Standard object's metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Spec is the desired state of the Ingress. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
			 */
			spec!: types.networking.v1beta1.IngressSpec

			/**
			 * Create a networking.v1beta1.Ingress object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.networking.v1beta1.Ingress) {
				const props: any = {}
				props.apiVersion = 'networking.k8s.io/v1beta1'
				props.kind = 'Ingress'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:Ingress`)
			}
		}
		/**
		 * IngressClass represents the class of the Ingress, referenced by the Ingress Spec. The
		 * `ingressclass.kubernetes.io/is-default-class` annotation can be used to indicate that an
		 * IngressClass should be considered default. When a single IngressClass resource has this
		 * annotation set to true, new Ingress resources without a class specified will be assigned this
		 * default class.
		 */
		export class IngressClass extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'networking.k8s.io/v1beta1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'IngressClass'

			/**
			 * Standard object's metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Spec is the desired state of the IngressClass. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
			 */
			spec!: types.networking.v1beta1.IngressClassSpec

			/**
			 * Create a networking.v1beta1.IngressClass object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.networking.v1beta1.IngressClass) {
				const props: any = {}
				props.apiVersion = 'networking.k8s.io/v1beta1'
				props.kind = 'IngressClass'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:IngressClass`)
			}
		}
		/**
		 * IngressClassList is a collection of IngressClasses.
		 */
		export class IngressClassList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'networking.k8s.io/v1beta1'

			/**
			 * Items is the list of IngressClasses.
			 */
			items!: types.networking.v1beta1.IngressClass[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'IngressClassList'

			/**
			 * Standard list metadata.
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a networking.v1beta1.IngressClassList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.networking.v1beta1.IngressClassList
			) {
				const props: any = {}
				props.apiVersion = 'networking.k8s.io/v1beta1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'IngressClassList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:IngressClassList`)
			}
		}
		/**
		 * IngressList is a collection of Ingress.
		 */
		export class IngressList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'networking.k8s.io/v1beta1'

			/**
			 * Items is the list of Ingress.
			 */
			items!: types.networking.v1beta1.Ingress[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'IngressList'

			/**
			 * Standard object's metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a networking.v1beta1.IngressList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.networking.v1beta1.IngressList) {
				const props: any = {}
				props.apiVersion = 'networking.k8s.io/v1beta1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'IngressList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:IngressList`)
			}
		}
	}
}

export namespace node {
	export namespace v1alpha1 {
		/**
		 * RuntimeClass defines a class of container runtime supported in the cluster. The RuntimeClass
		 * is used to determine which container runtime is used to run all containers in a pod.
		 * RuntimeClasses are (currently) manually defined by a user or cluster provisioner, and
		 * referenced in the PodSpec. The Kubelet is responsible for resolving the RuntimeClassName
		 * reference before running the pod.  For more details, see
		 * https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md
		 */
		export class RuntimeClass extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'node.k8s.io/v1alpha1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'RuntimeClass'

			/**
			 * More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Specification of the RuntimeClass More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
			 */
			spec!: types.node.v1alpha1.RuntimeClassSpec

			/**
			 * Create a node.v1alpha1.RuntimeClass object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.node.v1alpha1.RuntimeClass) {
				const props: any = {}
				props.apiVersion = 'node.k8s.io/v1alpha1'
				props.kind = 'RuntimeClass'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:RuntimeClass`)
			}
		}
		/**
		 * RuntimeClassList is a list of RuntimeClass objects.
		 */
		export class RuntimeClassList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'node.k8s.io/v1alpha1'

			/**
			 * Items is a list of schema objects.
			 */
			items!: types.node.v1alpha1.RuntimeClass[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'RuntimeClassList'

			/**
			 * Standard list metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a node.v1alpha1.RuntimeClassList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.node.v1alpha1.RuntimeClassList) {
				const props: any = {}
				props.apiVersion = 'node.k8s.io/v1alpha1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'RuntimeClassList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:RuntimeClassList`)
			}
		}
	}

	export namespace v1beta1 {
		/**
		 * RuntimeClass defines a class of container runtime supported in the cluster. The RuntimeClass
		 * is used to determine which container runtime is used to run all containers in a pod.
		 * RuntimeClasses are (currently) manually defined by a user or cluster provisioner, and
		 * referenced in the PodSpec. The Kubelet is responsible for resolving the RuntimeClassName
		 * reference before running the pod.  For more details, see
		 * https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md
		 */
		export class RuntimeClass extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'node.k8s.io/v1beta1'

			/**
			 * Handler specifies the underlying runtime and configuration that the CRI implementation will
			 * use to handle pods of this class. The possible values are specific to the node & CRI
			 * configuration.  It is assumed that all handlers are available on every node, and handlers
			 * of the same name are equivalent on every node. For example, a handler called "runc" might
			 * specify that the runc OCI runtime (using native Linux containers) will be used to run the
			 * containers in a pod. The Handler must conform to the DNS Label (RFC 1123) requirements, and
			 * is immutable.
			 */
			handler!: string

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'RuntimeClass'

			/**
			 * More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Overhead represents the resource overhead associated with running a pod for a given
			 * RuntimeClass. For more details, see
			 * https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This field is
			 * alpha-level as of Kubernetes v1.15, and is only honored by servers that enable the
			 * PodOverhead feature.
			 */
			overhead?: types.node.v1beta1.Overhead

			/**
			 * Scheduling holds the scheduling constraints to ensure that pods running with this
			 * RuntimeClass are scheduled to nodes that support it. If scheduling is nil, this
			 * RuntimeClass is assumed to be supported by all nodes.
			 */
			scheduling?: types.node.v1beta1.Scheduling

			/**
			 * Create a node.v1beta1.RuntimeClass object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.node.v1beta1.RuntimeClass) {
				const props: any = {}
				props.apiVersion = 'node.k8s.io/v1beta1'
				props.handler = (desc && desc.handler) || undefined
				props.kind = 'RuntimeClass'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.overhead = (desc && desc.overhead) || undefined
				props.scheduling = (desc && desc.scheduling) || undefined

				super(name, props)
				this.setType(`k8s:RuntimeClass`)
			}
		}
		/**
		 * RuntimeClassList is a list of RuntimeClass objects.
		 */
		export class RuntimeClassList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'node.k8s.io/v1beta1'

			/**
			 * Items is a list of schema objects.
			 */
			items!: types.node.v1beta1.RuntimeClass[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'RuntimeClassList'

			/**
			 * Standard list metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a node.v1beta1.RuntimeClassList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.node.v1beta1.RuntimeClassList) {
				const props: any = {}
				props.apiVersion = 'node.k8s.io/v1beta1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'RuntimeClassList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:RuntimeClassList`)
			}
		}
	}
}

export namespace policy {
	export namespace v1beta1 {
		/**
		 * PodDisruptionBudget is an object to define the max disruption that can be caused to a
		 * collection of pods
		 */
		export class PodDisruptionBudget extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'policy/v1beta1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'PodDisruptionBudget'

			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Specification of the desired behavior of the PodDisruptionBudget.
			 */
			spec!: types.policy.v1beta1.PodDisruptionBudgetSpec

			/**
			 * Create a policy.v1beta1.PodDisruptionBudget object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.policy.v1beta1.PodDisruptionBudget
			) {
				const props: any = {}
				props.apiVersion = 'policy/v1beta1'
				props.kind = 'PodDisruptionBudget'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:PodDisruptionBudget`)
			}
		}
		/**
		 * PodDisruptionBudgetList is a collection of PodDisruptionBudgets.
		 */
		export class PodDisruptionBudgetList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'policy/v1beta1'

			items!: types.policy.v1beta1.PodDisruptionBudget[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'PodDisruptionBudgetList'

			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a policy.v1beta1.PodDisruptionBudgetList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.policy.v1beta1.PodDisruptionBudgetList
			) {
				const props: any = {}
				props.apiVersion = 'policy/v1beta1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'PodDisruptionBudgetList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:PodDisruptionBudgetList`)
			}
		}
		/**
		 * PodSecurityPolicy governs the ability to make requests that affect the Security Context that
		 * will be applied to a pod and container.
		 */
		export class PodSecurityPolicy extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'policy/v1beta1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'PodSecurityPolicy'

			/**
			 * Standard object's metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * spec defines the policy enforced.
			 */
			spec!: types.policy.v1beta1.PodSecurityPolicySpec

			/**
			 * Create a policy.v1beta1.PodSecurityPolicy object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.policy.v1beta1.PodSecurityPolicy) {
				const props: any = {}
				props.apiVersion = 'policy/v1beta1'
				props.kind = 'PodSecurityPolicy'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:PodSecurityPolicy`)
			}
		}
		/**
		 * PodSecurityPolicyList is a list of PodSecurityPolicy objects.
		 */
		export class PodSecurityPolicyList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'policy/v1beta1'

			/**
			 * items is a list of schema objects.
			 */
			items!: types.policy.v1beta1.PodSecurityPolicy[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'PodSecurityPolicyList'

			/**
			 * Standard list metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a policy.v1beta1.PodSecurityPolicyList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.policy.v1beta1.PodSecurityPolicyList
			) {
				const props: any = {}
				props.apiVersion = 'policy/v1beta1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'PodSecurityPolicyList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:PodSecurityPolicyList`)
			}
		}
	}
}

export namespace rbac {
	export namespace v1 {
		/**
		 * ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a
		 * unit by a RoleBinding or ClusterRoleBinding.
		 */
		export class ClusterRole extends kite.Resource {
			/**
			 * AggregationRule is an optional field that describes how to build the Rules for this
			 * ClusterRole. If AggregationRule is set, then the Rules are controller managed and direct
			 * changes to Rules will be stomped by the controller.
			 */
			aggregationRule?: types.rbac.v1.AggregationRule

			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'rbac.authorization.k8s.io/v1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'ClusterRole'

			/**
			 * Standard object's metadata.
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Rules holds all the PolicyRules for this ClusterRole
			 */
			rules?: types.rbac.v1.PolicyRule[]

			/**
			 * Create a rbac.v1.ClusterRole object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.rbac.v1.ClusterRole) {
				const props: any = {}
				props.aggregationRule = (desc && desc.aggregationRule) || undefined
				props.apiVersion = 'rbac.authorization.k8s.io/v1'
				props.kind = 'ClusterRole'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.rules = (desc && desc.rules) || undefined

				super(name, props)
				this.setType(`k8s:ClusterRole`)
			}
		}
		/**
		 * ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a
		 * ClusterRole in the global namespace, and adds who information via Subject.
		 */
		export class ClusterRoleBinding extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'rbac.authorization.k8s.io/v1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'ClusterRoleBinding'

			/**
			 * Standard object's metadata.
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be
			 * resolved, the Authorizer must return an error.
			 */
			roleRef!: types.rbac.v1.RoleRef

			/**
			 * Subjects holds references to the objects the role applies to.
			 */
			subjects?: types.rbac.v1.Subject[]

			/**
			 * Create a rbac.v1.ClusterRoleBinding object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.rbac.v1.ClusterRoleBinding) {
				const props: any = {}
				props.apiVersion = 'rbac.authorization.k8s.io/v1'
				props.kind = 'ClusterRoleBinding'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.roleRef = (desc && desc.roleRef) || undefined
				props.subjects = (desc && desc.subjects) || undefined

				super(name, props)
				this.setType(`k8s:ClusterRoleBinding`)
			}
		}
		/**
		 * ClusterRoleBindingList is a collection of ClusterRoleBindings
		 */
		export class ClusterRoleBindingList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'rbac.authorization.k8s.io/v1'

			/**
			 * Items is a list of ClusterRoleBindings
			 */
			items!: types.rbac.v1.ClusterRoleBinding[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'ClusterRoleBindingList'

			/**
			 * Standard object's metadata.
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a rbac.v1.ClusterRoleBindingList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.rbac.v1.ClusterRoleBindingList) {
				const props: any = {}
				props.apiVersion = 'rbac.authorization.k8s.io/v1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'ClusterRoleBindingList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:ClusterRoleBindingList`)
			}
		}
		/**
		 * ClusterRoleList is a collection of ClusterRoles
		 */
		export class ClusterRoleList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'rbac.authorization.k8s.io/v1'

			/**
			 * Items is a list of ClusterRoles
			 */
			items!: types.rbac.v1.ClusterRole[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'ClusterRoleList'

			/**
			 * Standard object's metadata.
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a rbac.v1.ClusterRoleList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.rbac.v1.ClusterRoleList) {
				const props: any = {}
				props.apiVersion = 'rbac.authorization.k8s.io/v1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'ClusterRoleList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:ClusterRoleList`)
			}
		}
		/**
		 * Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a
		 * RoleBinding.
		 */
		export class Role extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'rbac.authorization.k8s.io/v1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'Role'

			/**
			 * Standard object's metadata.
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Rules holds all the PolicyRules for this Role
			 */
			rules?: types.rbac.v1.PolicyRule[]

			/**
			 * Create a rbac.v1.Role object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.rbac.v1.Role) {
				const props: any = {}
				props.apiVersion = 'rbac.authorization.k8s.io/v1'
				props.kind = 'Role'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.rules = (desc && desc.rules) || undefined

				super(name, props)
				this.setType(`k8s:Role`)
			}
		}
		/**
		 * RoleBinding references a role, but does not contain it.  It can reference a Role in the same
		 * namespace or a ClusterRole in the global namespace. It adds who information via Subjects and
		 * namespace information by which namespace it exists in.  RoleBindings in a given namespace
		 * only have effect in that namespace.
		 */
		export class RoleBinding extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'rbac.authorization.k8s.io/v1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'RoleBinding'

			/**
			 * Standard object's metadata.
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * RoleRef can reference a Role in the current namespace or a ClusterRole in the global
			 * namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.
			 */
			roleRef!: types.rbac.v1.RoleRef

			/**
			 * Subjects holds references to the objects the role applies to.
			 */
			subjects?: types.rbac.v1.Subject[]

			/**
			 * Create a rbac.v1.RoleBinding object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.rbac.v1.RoleBinding) {
				const props: any = {}
				props.apiVersion = 'rbac.authorization.k8s.io/v1'
				props.kind = 'RoleBinding'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.roleRef = (desc && desc.roleRef) || undefined
				props.subjects = (desc && desc.subjects) || undefined

				super(name, props)
				this.setType(`k8s:RoleBinding`)
			}
		}
		/**
		 * RoleBindingList is a collection of RoleBindings
		 */
		export class RoleBindingList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'rbac.authorization.k8s.io/v1'

			/**
			 * Items is a list of RoleBindings
			 */
			items!: types.rbac.v1.RoleBinding[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'RoleBindingList'

			/**
			 * Standard object's metadata.
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a rbac.v1.RoleBindingList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.rbac.v1.RoleBindingList) {
				const props: any = {}
				props.apiVersion = 'rbac.authorization.k8s.io/v1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'RoleBindingList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:RoleBindingList`)
			}
		}
		/**
		 * RoleList is a collection of Roles
		 */
		export class RoleList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'rbac.authorization.k8s.io/v1'

			/**
			 * Items is a list of Roles
			 */
			items!: types.rbac.v1.Role[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'RoleList'

			/**
			 * Standard object's metadata.
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a rbac.v1.RoleList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.rbac.v1.RoleList) {
				const props: any = {}
				props.apiVersion = 'rbac.authorization.k8s.io/v1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'RoleList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:RoleList`)
			}
		}
	}

	export namespace v1alpha1 {
		/**
		 * ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a
		 * unit by a RoleBinding or ClusterRoleBinding.
		 *
		 * @deprecated rbac/v1alpha1/ClusterRole is deprecated by rbac/v1/ClusterRole and not supported
		 * by Kubernetes v1.20+ clusters.
		 */
		export class ClusterRole extends kite.Resource {
			/**
			 * AggregationRule is an optional field that describes how to build the Rules for this
			 * ClusterRole. If AggregationRule is set, then the Rules are controller managed and direct
			 * changes to Rules will be stomped by the controller.
			 */
			aggregationRule?: types.rbac.v1alpha1.AggregationRule

			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'rbac.authorization.k8s.io/v1alpha1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'ClusterRole'

			/**
			 * Standard object's metadata.
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Rules holds all the PolicyRules for this ClusterRole
			 */
			rules?: types.rbac.v1alpha1.PolicyRule[]

			/**
			 * Create a rbac.v1alpha1.ClusterRole object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.rbac.v1alpha1.ClusterRole) {
				const props: any = {}
				props.aggregationRule = (desc && desc.aggregationRule) || undefined
				props.apiVersion = 'rbac.authorization.k8s.io/v1alpha1'
				props.kind = 'ClusterRole'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.rules = (desc && desc.rules) || undefined

				super(name, props)
				this.setType(`k8s:ClusterRole`)
			}
		}
		/**
		 * ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a
		 * ClusterRole in the global namespace, and adds who information via Subject.
		 *
		 * @deprecated rbac/v1alpha1/ClusterRoleBinding is deprecated by rbac/v1/ClusterRoleBinding and
		 * not supported by Kubernetes v1.20+ clusters.
		 */
		export class ClusterRoleBinding extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'rbac.authorization.k8s.io/v1alpha1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'ClusterRoleBinding'

			/**
			 * Standard object's metadata.
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be
			 * resolved, the Authorizer must return an error.
			 */
			roleRef!: types.rbac.v1alpha1.RoleRef

			/**
			 * Subjects holds references to the objects the role applies to.
			 */
			subjects?: types.rbac.v1alpha1.Subject[]

			/**
			 * Create a rbac.v1alpha1.ClusterRoleBinding object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.rbac.v1alpha1.ClusterRoleBinding) {
				const props: any = {}
				props.apiVersion = 'rbac.authorization.k8s.io/v1alpha1'
				props.kind = 'ClusterRoleBinding'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.roleRef = (desc && desc.roleRef) || undefined
				props.subjects = (desc && desc.subjects) || undefined

				super(name, props)
				this.setType(`k8s:ClusterRoleBinding`)
			}
		}
		/**
		 * ClusterRoleBindingList is a collection of ClusterRoleBindings.
		 *
		 * @deprecated rbac/v1alpha1/ClusterRoleBindingList is deprecated by
		 * rbac/v1/ClusterRoleBindingList and not supported by Kubernetes v1.20+ clusters.
		 */
		export class ClusterRoleBindingList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'rbac.authorization.k8s.io/v1alpha1'

			/**
			 * Items is a list of ClusterRoleBindings
			 */
			items!: types.rbac.v1alpha1.ClusterRoleBinding[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'ClusterRoleBindingList'

			/**
			 * Standard object's metadata.
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a rbac.v1alpha1.ClusterRoleBindingList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.rbac.v1alpha1.ClusterRoleBindingList
			) {
				const props: any = {}
				props.apiVersion = 'rbac.authorization.k8s.io/v1alpha1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'ClusterRoleBindingList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:ClusterRoleBindingList`)
			}
		}
		/**
		 * ClusterRoleList is a collection of ClusterRoles.
		 *
		 * @deprecated rbac/v1alpha1/ClusterRoleList is deprecated by rbac/v1/ClusterRoleList and not
		 * supported by Kubernetes v1.20+ clusters.
		 */
		export class ClusterRoleList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'rbac.authorization.k8s.io/v1alpha1'

			/**
			 * Items is a list of ClusterRoles
			 */
			items!: types.rbac.v1alpha1.ClusterRole[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'ClusterRoleList'

			/**
			 * Standard object's metadata.
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a rbac.v1alpha1.ClusterRoleList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.rbac.v1alpha1.ClusterRoleList) {
				const props: any = {}
				props.apiVersion = 'rbac.authorization.k8s.io/v1alpha1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'ClusterRoleList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:ClusterRoleList`)
			}
		}
		/**
		 * Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a
		 * RoleBinding.
		 *
		 * @deprecated rbac/v1alpha1/Role is deprecated by rbac/v1/Role and not supported by Kubernetes
		 * v1.20+ clusters.
		 */
		export class Role extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'rbac.authorization.k8s.io/v1alpha1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'Role'

			/**
			 * Standard object's metadata.
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Rules holds all the PolicyRules for this Role
			 */
			rules?: types.rbac.v1alpha1.PolicyRule[]

			/**
			 * Create a rbac.v1alpha1.Role object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.rbac.v1alpha1.Role) {
				const props: any = {}
				props.apiVersion = 'rbac.authorization.k8s.io/v1alpha1'
				props.kind = 'Role'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.rules = (desc && desc.rules) || undefined

				super(name, props)
				this.setType(`k8s:Role`)
			}
		}
		/**
		 * RoleBinding references a role, but does not contain it.  It can reference a Role in the same
		 * namespace or a ClusterRole in the global namespace. It adds who information via Subjects and
		 * namespace information by which namespace it exists in.  RoleBindings in a given namespace
		 * only have effect in that namespace.
		 *
		 * @deprecated rbac/v1alpha1/RoleBinding is deprecated by rbac/v1/RoleBinding and not supported
		 * by Kubernetes v1.20+ clusters.
		 */
		export class RoleBinding extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'rbac.authorization.k8s.io/v1alpha1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'RoleBinding'

			/**
			 * Standard object's metadata.
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * RoleRef can reference a Role in the current namespace or a ClusterRole in the global
			 * namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.
			 */
			roleRef!: types.rbac.v1alpha1.RoleRef

			/**
			 * Subjects holds references to the objects the role applies to.
			 */
			subjects?: types.rbac.v1alpha1.Subject[]

			/**
			 * Create a rbac.v1alpha1.RoleBinding object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.rbac.v1alpha1.RoleBinding) {
				const props: any = {}
				props.apiVersion = 'rbac.authorization.k8s.io/v1alpha1'
				props.kind = 'RoleBinding'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.roleRef = (desc && desc.roleRef) || undefined
				props.subjects = (desc && desc.subjects) || undefined

				super(name, props)
				this.setType(`k8s:RoleBinding`)
			}
		}
		/**
		 * RoleBindingList is a collection of RoleBindings
		 *
		 * @deprecated rbac/v1alpha1/RoleBindingList is deprecated by rbac/v1/RoleBindingList and not
		 * supported by Kubernetes v1.20+ clusters.
		 */
		export class RoleBindingList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'rbac.authorization.k8s.io/v1alpha1'

			/**
			 * Items is a list of RoleBindings
			 */
			items!: types.rbac.v1alpha1.RoleBinding[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'RoleBindingList'

			/**
			 * Standard object's metadata.
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a rbac.v1alpha1.RoleBindingList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.rbac.v1alpha1.RoleBindingList) {
				const props: any = {}
				props.apiVersion = 'rbac.authorization.k8s.io/v1alpha1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'RoleBindingList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:RoleBindingList`)
			}
		}
		/**
		 * RoleList is a collection of Roles.
		 *
		 * @deprecated rbac/v1alpha1/RoleList is deprecated by rbac/v1/RoleList and not supported by
		 * Kubernetes v1.20+ clusters.
		 */
		export class RoleList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'rbac.authorization.k8s.io/v1alpha1'

			/**
			 * Items is a list of Roles
			 */
			items!: types.rbac.v1alpha1.Role[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'RoleList'

			/**
			 * Standard object's metadata.
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a rbac.v1alpha1.RoleList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.rbac.v1alpha1.RoleList) {
				const props: any = {}
				props.apiVersion = 'rbac.authorization.k8s.io/v1alpha1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'RoleList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:RoleList`)
			}
		}
	}

	export namespace v1beta1 {
		/**
		 * ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a
		 * unit by a RoleBinding or ClusterRoleBinding.
		 *
		 * @deprecated rbac/v1beta1/ClusterRole is deprecated by rbac/v1/ClusterRole and not supported
		 * by Kubernetes v1.20+ clusters.
		 */
		export class ClusterRole extends kite.Resource {
			/**
			 * AggregationRule is an optional field that describes how to build the Rules for this
			 * ClusterRole. If AggregationRule is set, then the Rules are controller managed and direct
			 * changes to Rules will be stomped by the controller.
			 */
			aggregationRule?: types.rbac.v1beta1.AggregationRule

			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'rbac.authorization.k8s.io/v1beta1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'ClusterRole'

			/**
			 * Standard object's metadata.
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Rules holds all the PolicyRules for this ClusterRole
			 */
			rules?: types.rbac.v1beta1.PolicyRule[]

			/**
			 * Create a rbac.v1beta1.ClusterRole object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.rbac.v1beta1.ClusterRole) {
				const props: any = {}
				props.aggregationRule = (desc && desc.aggregationRule) || undefined
				props.apiVersion = 'rbac.authorization.k8s.io/v1beta1'
				props.kind = 'ClusterRole'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.rules = (desc && desc.rules) || undefined

				super(name, props)
				this.setType(`k8s:ClusterRole`)
			}
		}
		/**
		 * ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a
		 * ClusterRole in the global namespace, and adds who information via Subject.
		 *
		 * @deprecated rbac/v1beta1/ClusterRoleBinding is deprecated by rbac/v1/ClusterRoleBinding and
		 * not supported by Kubernetes v1.20+ clusters.
		 */
		export class ClusterRoleBinding extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'rbac.authorization.k8s.io/v1beta1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'ClusterRoleBinding'

			/**
			 * Standard object's metadata.
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be
			 * resolved, the Authorizer must return an error.
			 */
			roleRef!: types.rbac.v1beta1.RoleRef

			/**
			 * Subjects holds references to the objects the role applies to.
			 */
			subjects?: types.rbac.v1beta1.Subject[]

			/**
			 * Create a rbac.v1beta1.ClusterRoleBinding object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.rbac.v1beta1.ClusterRoleBinding) {
				const props: any = {}
				props.apiVersion = 'rbac.authorization.k8s.io/v1beta1'
				props.kind = 'ClusterRoleBinding'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.roleRef = (desc && desc.roleRef) || undefined
				props.subjects = (desc && desc.subjects) || undefined

				super(name, props)
				this.setType(`k8s:ClusterRoleBinding`)
			}
		}
		/**
		 * ClusterRoleBindingList is a collection of ClusterRoleBindings.
		 *
		 * @deprecated rbac/v1beta1/ClusterRoleBindingList is deprecated by
		 * rbac/v1/ClusterRoleBindingList and not supported by Kubernetes v1.20+ clusters.
		 */
		export class ClusterRoleBindingList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'rbac.authorization.k8s.io/v1beta1'

			/**
			 * Items is a list of ClusterRoleBindings
			 */
			items!: types.rbac.v1beta1.ClusterRoleBinding[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'ClusterRoleBindingList'

			/**
			 * Standard object's metadata.
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a rbac.v1beta1.ClusterRoleBindingList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.rbac.v1beta1.ClusterRoleBindingList
			) {
				const props: any = {}
				props.apiVersion = 'rbac.authorization.k8s.io/v1beta1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'ClusterRoleBindingList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:ClusterRoleBindingList`)
			}
		}
		/**
		 * ClusterRoleList is a collection of ClusterRoles.
		 *
		 * @deprecated rbac/v1beta1/ClusterRoleList is deprecated by rbac/v1/ClusterRoleList and not
		 * supported by Kubernetes v1.20+ clusters.
		 */
		export class ClusterRoleList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'rbac.authorization.k8s.io/v1beta1'

			/**
			 * Items is a list of ClusterRoles
			 */
			items!: types.rbac.v1beta1.ClusterRole[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'ClusterRoleList'

			/**
			 * Standard object's metadata.
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a rbac.v1beta1.ClusterRoleList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.rbac.v1beta1.ClusterRoleList) {
				const props: any = {}
				props.apiVersion = 'rbac.authorization.k8s.io/v1beta1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'ClusterRoleList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:ClusterRoleList`)
			}
		}
		/**
		 * Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a
		 * RoleBinding.
		 *
		 * @deprecated rbac/v1beta1/Role is deprecated by rbac/v1/Role and not supported by Kubernetes
		 * v1.20+ clusters.
		 */
		export class Role extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'rbac.authorization.k8s.io/v1beta1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'Role'

			/**
			 * Standard object's metadata.
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Rules holds all the PolicyRules for this Role
			 */
			rules?: types.rbac.v1beta1.PolicyRule[]

			/**
			 * Create a rbac.v1beta1.Role object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.rbac.v1beta1.Role) {
				const props: any = {}
				props.apiVersion = 'rbac.authorization.k8s.io/v1beta1'
				props.kind = 'Role'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.rules = (desc && desc.rules) || undefined

				super(name, props)
				this.setType(`k8s:Role`)
			}
		}
		/**
		 * RoleBinding references a role, but does not contain it.  It can reference a Role in the same
		 * namespace or a ClusterRole in the global namespace. It adds who information via Subjects and
		 * namespace information by which namespace it exists in.  RoleBindings in a given namespace
		 * only have effect in that namespace.
		 *
		 * @deprecated rbac/v1beta1/RoleBinding is deprecated by rbac/v1/RoleBinding and not supported
		 * by Kubernetes v1.20+ clusters.
		 */
		export class RoleBinding extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'rbac.authorization.k8s.io/v1beta1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'RoleBinding'

			/**
			 * Standard object's metadata.
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * RoleRef can reference a Role in the current namespace or a ClusterRole in the global
			 * namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.
			 */
			roleRef!: types.rbac.v1beta1.RoleRef

			/**
			 * Subjects holds references to the objects the role applies to.
			 */
			subjects?: types.rbac.v1beta1.Subject[]

			/**
			 * Create a rbac.v1beta1.RoleBinding object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.rbac.v1beta1.RoleBinding) {
				const props: any = {}
				props.apiVersion = 'rbac.authorization.k8s.io/v1beta1'
				props.kind = 'RoleBinding'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.roleRef = (desc && desc.roleRef) || undefined
				props.subjects = (desc && desc.subjects) || undefined

				super(name, props)
				this.setType(`k8s:RoleBinding`)
			}
		}
		/**
		 * RoleBindingList is a collection of RoleBindings
		 *
		 * @deprecated rbac/v1beta1/RoleBindingList is deprecated by rbac/v1/RoleBindingList and not
		 * supported by Kubernetes v1.20+ clusters.
		 */
		export class RoleBindingList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'rbac.authorization.k8s.io/v1beta1'

			/**
			 * Items is a list of RoleBindings
			 */
			items!: types.rbac.v1beta1.RoleBinding[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'RoleBindingList'

			/**
			 * Standard object's metadata.
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a rbac.v1beta1.RoleBindingList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.rbac.v1beta1.RoleBindingList) {
				const props: any = {}
				props.apiVersion = 'rbac.authorization.k8s.io/v1beta1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'RoleBindingList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:RoleBindingList`)
			}
		}
		/**
		 * RoleList is a collection of Roles
		 *
		 * @deprecated rbac/v1beta1/RoleList is deprecated by rbac/v1/RoleList and not supported by
		 * Kubernetes v1.20+ clusters.
		 */
		export class RoleList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'rbac.authorization.k8s.io/v1beta1'

			/**
			 * Items is a list of Roles
			 */
			items!: types.rbac.v1beta1.Role[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'RoleList'

			/**
			 * Standard object's metadata.
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a rbac.v1beta1.RoleList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.rbac.v1beta1.RoleList) {
				const props: any = {}
				props.apiVersion = 'rbac.authorization.k8s.io/v1beta1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'RoleList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:RoleList`)
			}
		}
	}
}

export namespace scheduling {
	export namespace v1 {
		/**
		 * PriorityClass defines mapping from a priority class name to the priority integer value. The
		 * value can be any valid integer.
		 */
		export class PriorityClass extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'scheduling.k8s.io/v1'

			/**
			 * description is an arbitrary string that usually provides guidelines on when this priority
			 * class should be used.
			 */
			description?: string

			/**
			 * globalDefault specifies whether this PriorityClass should be considered as the default
			 * priority for pods that do not have any priority class. Only one PriorityClass can be marked
			 * as `globalDefault`. However, if more than one PriorityClasses exists with their
			 * `globalDefault` field set to true, the smallest value of such global default
			 * PriorityClasses will be used as the default priority.
			 */
			globalDefault?: boolean

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'PriorityClass'

			/**
			 * Standard object's metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never,
			 * PreemptLowerPriority. Defaults to PreemptLowerPriority if unset. This field is alpha-level
			 * and is only honored by servers that enable the NonPreemptingPriority feature.
			 */
			preemptionPolicy?: string

			/**
			 * The value of this priority class. This is the actual priority that pods receive when they
			 * have the name of this class in their pod spec.
			 */
			value!: number

			/**
			 * Create a scheduling.v1.PriorityClass object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.scheduling.v1.PriorityClass) {
				const props: any = {}
				props.apiVersion = 'scheduling.k8s.io/v1'
				props.description = (desc && desc.description) || undefined
				props.globalDefault = (desc && desc.globalDefault) || undefined
				props.kind = 'PriorityClass'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.preemptionPolicy = (desc && desc.preemptionPolicy) || undefined
				props.value = (desc && desc.value) || undefined

				super(name, props)
				this.setType(`k8s:PriorityClass`)
			}
		}
		/**
		 * PriorityClassList is a collection of priority classes.
		 */
		export class PriorityClassList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'scheduling.k8s.io/v1'

			/**
			 * items is the list of PriorityClasses
			 */
			items!: types.scheduling.v1.PriorityClass[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'PriorityClassList'

			/**
			 * Standard list metadata More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a scheduling.v1.PriorityClassList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.scheduling.v1.PriorityClassList) {
				const props: any = {}
				props.apiVersion = 'scheduling.k8s.io/v1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'PriorityClassList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:PriorityClassList`)
			}
		}
	}

	export namespace v1alpha1 {
		/**
		 * PriorityClass defines mapping from a priority class name to the priority integer value. The
		 * value can be any valid integer.
		 *
		 * @deprecated scheduling/v1alpha1/PriorityClass is deprecated by scheduling/v1/PriorityClass
		 * and not supported by Kubernetes v1.17+ clusters.
		 */
		export class PriorityClass extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'scheduling.k8s.io/v1alpha1'

			/**
			 * description is an arbitrary string that usually provides guidelines on when this priority
			 * class should be used.
			 */
			description?: string

			/**
			 * globalDefault specifies whether this PriorityClass should be considered as the default
			 * priority for pods that do not have any priority class. Only one PriorityClass can be marked
			 * as `globalDefault`. However, if more than one PriorityClasses exists with their
			 * `globalDefault` field set to true, the smallest value of such global default
			 * PriorityClasses will be used as the default priority.
			 */
			globalDefault?: boolean

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'PriorityClass'

			/**
			 * Standard object's metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never,
			 * PreemptLowerPriority. Defaults to PreemptLowerPriority if unset. This field is alpha-level
			 * and is only honored by servers that enable the NonPreemptingPriority feature.
			 */
			preemptionPolicy?: string

			/**
			 * The value of this priority class. This is the actual priority that pods receive when they
			 * have the name of this class in their pod spec.
			 */
			value!: number

			/**
			 * Create a scheduling.v1alpha1.PriorityClass object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.scheduling.v1alpha1.PriorityClass) {
				const props: any = {}
				props.apiVersion = 'scheduling.k8s.io/v1alpha1'
				props.description = (desc && desc.description) || undefined
				props.globalDefault = (desc && desc.globalDefault) || undefined
				props.kind = 'PriorityClass'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.preemptionPolicy = (desc && desc.preemptionPolicy) || undefined
				props.value = (desc && desc.value) || undefined

				super(name, props)
				this.setType(`k8s:PriorityClass`)
			}
		}
		/**
		 * PriorityClassList is a collection of priority classes.
		 */
		export class PriorityClassList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'scheduling.k8s.io/v1alpha1'

			/**
			 * items is the list of PriorityClasses
			 */
			items!: types.scheduling.v1alpha1.PriorityClass[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'PriorityClassList'

			/**
			 * Standard list metadata More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a scheduling.v1alpha1.PriorityClassList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.scheduling.v1alpha1.PriorityClassList
			) {
				const props: any = {}
				props.apiVersion = 'scheduling.k8s.io/v1alpha1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'PriorityClassList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:PriorityClassList`)
			}
		}
	}

	export namespace v1beta1 {
		/**
		 * PriorityClass defines mapping from a priority class name to the priority integer value. The
		 * value can be any valid integer.
		 *
		 * @deprecated scheduling/v1beta1/PriorityClass is deprecated by scheduling/v1/PriorityClass and
		 * not supported by Kubernetes v1.17+ clusters.
		 */
		export class PriorityClass extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'scheduling.k8s.io/v1beta1'

			/**
			 * description is an arbitrary string that usually provides guidelines on when this priority
			 * class should be used.
			 */
			description?: string

			/**
			 * globalDefault specifies whether this PriorityClass should be considered as the default
			 * priority for pods that do not have any priority class. Only one PriorityClass can be marked
			 * as `globalDefault`. However, if more than one PriorityClasses exists with their
			 * `globalDefault` field set to true, the smallest value of such global default
			 * PriorityClasses will be used as the default priority.
			 */
			globalDefault?: boolean

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'PriorityClass'

			/**
			 * Standard object's metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never,
			 * PreemptLowerPriority. Defaults to PreemptLowerPriority if unset. This field is alpha-level
			 * and is only honored by servers that enable the NonPreemptingPriority feature.
			 */
			preemptionPolicy?: string

			/**
			 * The value of this priority class. This is the actual priority that pods receive when they
			 * have the name of this class in their pod spec.
			 */
			value!: number

			/**
			 * Create a scheduling.v1beta1.PriorityClass object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.scheduling.v1beta1.PriorityClass) {
				const props: any = {}
				props.apiVersion = 'scheduling.k8s.io/v1beta1'
				props.description = (desc && desc.description) || undefined
				props.globalDefault = (desc && desc.globalDefault) || undefined
				props.kind = 'PriorityClass'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.preemptionPolicy = (desc && desc.preemptionPolicy) || undefined
				props.value = (desc && desc.value) || undefined

				super(name, props)
				this.setType(`k8s:PriorityClass`)
			}
		}
		/**
		 * PriorityClassList is a collection of priority classes.
		 */
		export class PriorityClassList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'scheduling.k8s.io/v1beta1'

			/**
			 * items is the list of PriorityClasses
			 */
			items!: types.scheduling.v1beta1.PriorityClass[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'PriorityClassList'

			/**
			 * Standard list metadata More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a scheduling.v1beta1.PriorityClassList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.scheduling.v1beta1.PriorityClassList
			) {
				const props: any = {}
				props.apiVersion = 'scheduling.k8s.io/v1beta1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'PriorityClassList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:PriorityClassList`)
			}
		}
	}
}

export namespace settings {
	export namespace v1alpha1 {
		/**
		 * PodPreset is a policy resource that defines additional runtime requirements for a Pod.
		 */
		export class PodPreset extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'settings.k8s.io/v1alpha1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'PodPreset'

			metadata!: types.meta.v1.ObjectMeta

			spec!: types.settings.v1alpha1.PodPresetSpec

			/**
			 * Create a settings.v1alpha1.PodPreset object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.settings.v1alpha1.PodPreset) {
				const props: any = {}
				props.apiVersion = 'settings.k8s.io/v1alpha1'
				props.kind = 'PodPreset'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:PodPreset`)
			}
		}
		/**
		 * PodPresetList is a list of PodPreset objects.
		 */
		export class PodPresetList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'settings.k8s.io/v1alpha1'

			/**
			 * Items is a list of schema objects.
			 */
			items!: types.settings.v1alpha1.PodPreset[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'PodPresetList'

			/**
			 * Standard list metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a settings.v1alpha1.PodPresetList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.settings.v1alpha1.PodPresetList) {
				const props: any = {}
				props.apiVersion = 'settings.k8s.io/v1alpha1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'PodPresetList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:PodPresetList`)
			}
		}
	}
}

export namespace storage {
	export namespace v1 {
		/**
		 * CSIDriver captures information about a Container Storage Interface (CSI) volume driver
		 * deployed on the cluster. Kubernetes attach detach controller uses this object to determine
		 * whether attach is required. Kubelet uses this object to determine whether pod information
		 * needs to be passed on mount. CSIDriver objects are non-namespaced.
		 */
		export class CSIDriver extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'storage.k8s.io/v1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'CSIDriver'

			/**
			 * Standard object metadata. metadata.Name indicates the name of the CSI driver that this
			 * object refers to; it MUST be the same name returned by the CSI GetPluginName() call for
			 * that driver. The driver name must be 63 characters or less, beginning and ending with an
			 * alphanumeric character ([a-z0-9A-Z]) with dashes (-), dots (.), and alphanumerics between.
			 * More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Specification of the CSI Driver.
			 */
			spec!: types.storage.v1.CSIDriverSpec

			/**
			 * Create a storage.v1.CSIDriver object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.storage.v1.CSIDriver) {
				const props: any = {}
				props.apiVersion = 'storage.k8s.io/v1'
				props.kind = 'CSIDriver'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:CSIDriver`)
			}
		}
		/**
		 * CSIDriverList is a collection of CSIDriver objects.
		 */
		export class CSIDriverList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'storage.k8s.io/v1'

			/**
			 * items is the list of CSIDriver
			 */
			items!: types.storage.v1.CSIDriver[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'CSIDriverList'

			/**
			 * Standard list metadata More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a storage.v1.CSIDriverList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.storage.v1.CSIDriverList) {
				const props: any = {}
				props.apiVersion = 'storage.k8s.io/v1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'CSIDriverList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:CSIDriverList`)
			}
		}
		/**
		 * CSINode holds information about all CSI drivers installed on a node. CSI drivers do not need
		 * to create the CSINode object directly. As long as they use the node-driver-registrar sidecar
		 * container, the kubelet will automatically populate the CSINode object for the CSI driver as
		 * part of kubelet plugin registration. CSINode has the same name as a node. If the object is
		 * missing, it means either there are no CSI Drivers available on the node, or the Kubelet
		 * version is low enough that it doesn't create this object. CSINode has an OwnerReference that
		 * points to the corresponding node object.
		 */
		export class CSINode extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'storage.k8s.io/v1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'CSINode'

			/**
			 * metadata.name must be the Kubernetes node name.
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * spec is the specification of CSINode
			 */
			spec!: types.storage.v1.CSINodeSpec

			/**
			 * Create a storage.v1.CSINode object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.storage.v1.CSINode) {
				const props: any = {}
				props.apiVersion = 'storage.k8s.io/v1'
				props.kind = 'CSINode'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:CSINode`)
			}
		}
		/**
		 * CSINodeList is a collection of CSINode objects.
		 */
		export class CSINodeList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'storage.k8s.io/v1'

			/**
			 * items is the list of CSINode
			 */
			items!: types.storage.v1.CSINode[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'CSINodeList'

			/**
			 * Standard list metadata More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a storage.v1.CSINodeList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.storage.v1.CSINodeList) {
				const props: any = {}
				props.apiVersion = 'storage.k8s.io/v1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'CSINodeList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:CSINodeList`)
			}
		}
		/**
		 * StorageClass describes the parameters for a class of storage for which PersistentVolumes can
		 * be dynamically provisioned.
		 *
		 * StorageClasses are non-namespaced; the name of the storage class according to etcd is in
		 * ObjectMeta.Name.
		 */
		export class StorageClass extends kite.Resource {
			/**
			 * AllowVolumeExpansion shows whether the storage class allow volume expand
			 */
			allowVolumeExpansion?: boolean

			/**
			 * Restrict the node topologies where volumes can be dynamically provisioned. Each volume
			 * plugin defines its own supported topology specifications. An empty TopologySelectorTerm
			 * list means there is no topology restriction. This field is only honored by servers that
			 * enable the VolumeScheduling feature.
			 */
			allowedTopologies?: types.core.v1.TopologySelectorTerm[]

			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'storage.k8s.io/v1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'StorageClass'

			/**
			 * Standard object's metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Dynamically provisioned PersistentVolumes of this storage class are created with these
			 * mountOptions, e.g. ["ro", "soft"]. Not validated - mount of the PVs will simply fail if one
			 * is invalid.
			 */
			mountOptions?: string[]

			/**
			 * Parameters holds the parameters for the provisioner that should create volumes of this
			 * storage class.
			 */
			parameters?: { [key: string]: string }

			/**
			 * Provisioner indicates the type of the provisioner.
			 */
			provisioner!: string

			/**
			 * Dynamically provisioned PersistentVolumes of this storage class are created with this
			 * reclaimPolicy. Defaults to Delete.
			 */
			reclaimPolicy?: string

			/**
			 * VolumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.
			 * When unset, VolumeBindingImmediate is used. This field is only honored by servers that
			 * enable the VolumeScheduling feature.
			 */
			volumeBindingMode?: string

			/**
			 * Create a storage.v1.StorageClass object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.storage.v1.StorageClass) {
				const props: any = {}
				props.allowVolumeExpansion =
					(desc && desc.allowVolumeExpansion) || undefined
				props.allowedTopologies = (desc && desc.allowedTopologies) || undefined
				props.apiVersion = 'storage.k8s.io/v1'
				props.kind = 'StorageClass'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.mountOptions = (desc && desc.mountOptions) || undefined
				props.parameters = (desc && desc.parameters) || undefined
				props.provisioner = (desc && desc.provisioner) || undefined
				props.reclaimPolicy = (desc && desc.reclaimPolicy) || undefined
				props.volumeBindingMode = (desc && desc.volumeBindingMode) || undefined

				super(name, props)
				this.setType(`k8s:StorageClass`)
			}
		}
		/**
		 * StorageClassList is a collection of storage classes.
		 */
		export class StorageClassList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'storage.k8s.io/v1'

			/**
			 * Items is the list of StorageClasses
			 */
			items!: types.storage.v1.StorageClass[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'StorageClassList'

			/**
			 * Standard list metadata More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a storage.v1.StorageClassList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.storage.v1.StorageClassList) {
				const props: any = {}
				props.apiVersion = 'storage.k8s.io/v1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'StorageClassList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:StorageClassList`)
			}
		}
		/**
		 * VolumeAttachment captures the intent to attach or detach the specified volume to/from the
		 * specified node.
		 *
		 * VolumeAttachment objects are non-namespaced.
		 */
		export class VolumeAttachment extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'storage.k8s.io/v1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'VolumeAttachment'

			/**
			 * Standard object metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Specification of the desired attach/detach volume behavior. Populated by the Kubernetes
			 * system.
			 */
			spec!: types.storage.v1.VolumeAttachmentSpec

			/**
			 * Create a storage.v1.VolumeAttachment object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.storage.v1.VolumeAttachment) {
				const props: any = {}
				props.apiVersion = 'storage.k8s.io/v1'
				props.kind = 'VolumeAttachment'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:VolumeAttachment`)
			}
		}
		/**
		 * VolumeAttachmentList is a collection of VolumeAttachment objects.
		 */
		export class VolumeAttachmentList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'storage.k8s.io/v1'

			/**
			 * Items is the list of VolumeAttachments
			 */
			items!: types.storage.v1.VolumeAttachment[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'VolumeAttachmentList'

			/**
			 * Standard list metadata More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a storage.v1.VolumeAttachmentList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.storage.v1.VolumeAttachmentList) {
				const props: any = {}
				props.apiVersion = 'storage.k8s.io/v1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'VolumeAttachmentList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:VolumeAttachmentList`)
			}
		}
	}

	export namespace v1alpha1 {
		/**
		 * VolumeAttachment captures the intent to attach or detach the specified volume to/from the
		 * specified node.
		 *
		 * VolumeAttachment objects are non-namespaced.
		 */
		export class VolumeAttachment extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'storage.k8s.io/v1alpha1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'VolumeAttachment'

			/**
			 * Standard object metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Specification of the desired attach/detach volume behavior. Populated by the Kubernetes
			 * system.
			 */
			spec!: types.storage.v1alpha1.VolumeAttachmentSpec

			/**
			 * Create a storage.v1alpha1.VolumeAttachment object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.storage.v1alpha1.VolumeAttachment) {
				const props: any = {}
				props.apiVersion = 'storage.k8s.io/v1alpha1'
				props.kind = 'VolumeAttachment'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:VolumeAttachment`)
			}
		}
		/**
		 * VolumeAttachmentList is a collection of VolumeAttachment objects.
		 */
		export class VolumeAttachmentList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'storage.k8s.io/v1alpha1'

			/**
			 * Items is the list of VolumeAttachments
			 */
			items!: types.storage.v1alpha1.VolumeAttachment[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'VolumeAttachmentList'

			/**
			 * Standard list metadata More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a storage.v1alpha1.VolumeAttachmentList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.storage.v1alpha1.VolumeAttachmentList
			) {
				const props: any = {}
				props.apiVersion = 'storage.k8s.io/v1alpha1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'VolumeAttachmentList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:VolumeAttachmentList`)
			}
		}
	}

	export namespace v1beta1 {
		/**
		 * CSIDriver captures information about a Container Storage Interface (CSI) volume driver
		 * deployed on the cluster. CSI drivers do not need to create the CSIDriver object directly.
		 * Instead they may use the cluster-driver-registrar sidecar container. When deployed with a CSI
		 * driver it automatically creates a CSIDriver object representing the driver. Kubernetes attach
		 * detach controller uses this object to determine whether attach is required. Kubelet uses this
		 * object to determine whether pod information needs to be passed on mount. CSIDriver objects
		 * are non-namespaced.
		 */
		export class CSIDriver extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'storage.k8s.io/v1beta1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'CSIDriver'

			/**
			 * Standard object metadata. metadata.Name indicates the name of the CSI driver that this
			 * object refers to; it MUST be the same name returned by the CSI GetPluginName() call for
			 * that driver. The driver name must be 63 characters or less, beginning and ending with an
			 * alphanumeric character ([a-z0-9A-Z]) with dashes (-), dots (.), and alphanumerics between.
			 * More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Specification of the CSI Driver.
			 */
			spec!: types.storage.v1beta1.CSIDriverSpec

			/**
			 * Create a storage.v1beta1.CSIDriver object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.storage.v1beta1.CSIDriver) {
				const props: any = {}
				props.apiVersion = 'storage.k8s.io/v1beta1'
				props.kind = 'CSIDriver'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:CSIDriver`)
			}
		}
		/**
		 * CSIDriverList is a collection of CSIDriver objects.
		 */
		export class CSIDriverList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'storage.k8s.io/v1beta1'

			/**
			 * items is the list of CSIDriver
			 */
			items!: types.storage.v1beta1.CSIDriver[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'CSIDriverList'

			/**
			 * Standard list metadata More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a storage.v1beta1.CSIDriverList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.storage.v1beta1.CSIDriverList) {
				const props: any = {}
				props.apiVersion = 'storage.k8s.io/v1beta1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'CSIDriverList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:CSIDriverList`)
			}
		}
		/**
		 * CSINode holds information about all CSI drivers installed on a node. CSI drivers do not need
		 * to create the CSINode object directly. As long as they use the node-driver-registrar sidecar
		 * container, the kubelet will automatically populate the CSINode object for the CSI driver as
		 * part of kubelet plugin registration. CSINode has the same name as a node. If the object is
		 * missing, it means either there are no CSI Drivers available on the node, or the Kubelet
		 * version is low enough that it doesn't create this object. CSINode has an OwnerReference that
		 * points to the corresponding node object.
		 *
		 * @deprecated storage/v1beta1/CSINode is deprecated by storage/v1/CSINode.
		 */
		export class CSINode extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'storage.k8s.io/v1beta1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'CSINode'

			/**
			 * metadata.name must be the Kubernetes node name.
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * spec is the specification of CSINode
			 */
			spec!: types.storage.v1beta1.CSINodeSpec

			/**
			 * Create a storage.v1beta1.CSINode object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.storage.v1beta1.CSINode) {
				const props: any = {}
				props.apiVersion = 'storage.k8s.io/v1beta1'
				props.kind = 'CSINode'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:CSINode`)
			}
		}
		/**
		 * CSINodeList is a collection of CSINode objects.
		 */
		export class CSINodeList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'storage.k8s.io/v1beta1'

			/**
			 * items is the list of CSINode
			 */
			items!: types.storage.v1beta1.CSINode[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'CSINodeList'

			/**
			 * Standard list metadata More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a storage.v1beta1.CSINodeList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.storage.v1beta1.CSINodeList) {
				const props: any = {}
				props.apiVersion = 'storage.k8s.io/v1beta1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'CSINodeList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:CSINodeList`)
			}
		}
		/**
		 * StorageClass describes the parameters for a class of storage for which PersistentVolumes can
		 * be dynamically provisioned.
		 *
		 * StorageClasses are non-namespaced; the name of the storage class according to etcd is in
		 * ObjectMeta.Name.
		 */
		export class StorageClass extends kite.Resource {
			/**
			 * AllowVolumeExpansion shows whether the storage class allow volume expand
			 */
			allowVolumeExpansion?: boolean

			/**
			 * Restrict the node topologies where volumes can be dynamically provisioned. Each volume
			 * plugin defines its own supported topology specifications. An empty TopologySelectorTerm
			 * list means there is no topology restriction. This field is only honored by servers that
			 * enable the VolumeScheduling feature.
			 */
			allowedTopologies?: types.core.v1.TopologySelectorTerm[]

			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'storage.k8s.io/v1beta1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'StorageClass'

			/**
			 * Standard object's metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Dynamically provisioned PersistentVolumes of this storage class are created with these
			 * mountOptions, e.g. ["ro", "soft"]. Not validated - mount of the PVs will simply fail if one
			 * is invalid.
			 */
			mountOptions?: string[]

			/**
			 * Parameters holds the parameters for the provisioner that should create volumes of this
			 * storage class.
			 */
			parameters?: { [key: string]: string }

			/**
			 * Provisioner indicates the type of the provisioner.
			 */
			provisioner!: string

			/**
			 * Dynamically provisioned PersistentVolumes of this storage class are created with this
			 * reclaimPolicy. Defaults to Delete.
			 */
			reclaimPolicy?: string

			/**
			 * VolumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.
			 * When unset, VolumeBindingImmediate is used. This field is only honored by servers that
			 * enable the VolumeScheduling feature.
			 */
			volumeBindingMode?: string

			/**
			 * Create a storage.v1beta1.StorageClass object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.storage.v1beta1.StorageClass) {
				const props: any = {}
				props.allowVolumeExpansion =
					(desc && desc.allowVolumeExpansion) || undefined
				props.allowedTopologies = (desc && desc.allowedTopologies) || undefined
				props.apiVersion = 'storage.k8s.io/v1beta1'
				props.kind = 'StorageClass'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.mountOptions = (desc && desc.mountOptions) || undefined
				props.parameters = (desc && desc.parameters) || undefined
				props.provisioner = (desc && desc.provisioner) || undefined
				props.reclaimPolicy = (desc && desc.reclaimPolicy) || undefined
				props.volumeBindingMode = (desc && desc.volumeBindingMode) || undefined

				super(name, props)
				this.setType(`k8s:StorageClass`)
			}
		}
		/**
		 * StorageClassList is a collection of storage classes.
		 */
		export class StorageClassList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'storage.k8s.io/v1beta1'

			/**
			 * Items is the list of StorageClasses
			 */
			items!: types.storage.v1beta1.StorageClass[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'StorageClassList'

			/**
			 * Standard list metadata More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a storage.v1beta1.StorageClassList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.storage.v1beta1.StorageClassList) {
				const props: any = {}
				props.apiVersion = 'storage.k8s.io/v1beta1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'StorageClassList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:StorageClassList`)
			}
		}
		/**
		 * VolumeAttachment captures the intent to attach or detach the specified volume to/from the
		 * specified node.
		 *
		 * VolumeAttachment objects are non-namespaced.
		 */
		export class VolumeAttachment extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'storage.k8s.io/v1beta1'

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'VolumeAttachment'

			/**
			 * Standard object metadata. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ObjectMeta

			/**
			 * Specification of the desired attach/detach volume behavior. Populated by the Kubernetes
			 * system.
			 */
			spec!: types.storage.v1beta1.VolumeAttachmentSpec

			/**
			 * Create a storage.v1beta1.VolumeAttachment object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(name: string, desc: types.storage.v1beta1.VolumeAttachment) {
				const props: any = {}
				props.apiVersion = 'storage.k8s.io/v1beta1'
				props.kind = 'VolumeAttachment'
				props.metadata = Object.assign({}, (desc && desc.metadata) || {}, {
					name: desc?.metadata?.name || name,
				})
				props.spec = (desc && desc.spec) || undefined

				super(name, props)
				this.setType(`k8s:VolumeAttachment`)
			}
		}
		/**
		 * VolumeAttachmentList is a collection of VolumeAttachment objects.
		 */
		export class VolumeAttachmentList extends kite.Resource {
			/**
			 * APIVersion defines the versioned schema of this representation of an object. Servers should
			 * convert recognized schemas to the latest internal value, and may reject unrecognized
			 * values. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
			 */
			apiVersion!: 'storage.k8s.io/v1beta1'

			/**
			 * Items is the list of VolumeAttachments
			 */
			items!: types.storage.v1beta1.VolumeAttachment[]

			/**
			 * Kind is a string value representing the REST resource this object represents. Servers may
			 * infer this from the endpoint the client submits requests to. Cannot be updated. In
			 * CamelCase. More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
			 */
			kind!: 'VolumeAttachmentList'

			/**
			 * Standard list metadata More info:
			 * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
			 */
			metadata!: types.meta.v1.ListMeta

			/**
			 * Create a storage.v1beta1.VolumeAttachmentList object with the given unique name and description.
			 *
			 * @param name The _unique_ name of the resource. Will configure metadata.name by default.
			 * @param desc The description to use to populate this object's properties.
			 */
			constructor(
				name: string,
				desc: types.storage.v1beta1.VolumeAttachmentList
			) {
				const props: any = {}
				props.apiVersion = 'storage.k8s.io/v1beta1'
				props.items = (desc && desc.items) || undefined
				props.kind = 'VolumeAttachmentList'
				props.metadata = desc?.metadata || {}

				super(name, props)
				this.setType(`k8s:VolumeAttachmentList`)
			}
		}
	}
}

export { types }
